{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/fov/basic-fov.tsx\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Terminal, Util, Generation, FOV, Input, CharCode, Color } from \"malwoden\";\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var mount = document.getElementById(\"example\");\n      var terminal = new Terminal.RetroTerminal({\n        width: 40,\n        height: 40,\n        imageURL: \"/font_16.png\",\n        charWidth: 16,\n        charHeight: 16,\n        mountNode: mount\n      });\n      var explored = new Util.Table(40, 40);\n      var map = new Generation.CellularAutomata(40, 40);\n      map.randomize(0.65);\n      map.doSimulationStep(3);\n      map.connect();\n      var free = [];\n\n      for (var x = 0; x < map.table.width; x++) {\n        for (var y = 0; y < map.table.height; y++) {\n          if (map.table.get({\n            x: x,\n            y: y\n          }) !== map.aliveValue) {\n            free.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      var player = {\n        x: free[0].x,\n        y: free[0].y\n      };\n      var fov = new FOV.PreciseShadowcasting({\n        lightPasses: function lightPasses(pos) {\n          return map.table.get(pos) !== 1;\n        },\n        topology: \"eight\",\n        cartesianRange: true\n      }); // Keyboard\n\n      var keyboard = new Input.KeyboardHandler();\n      var movement = new Input.KeyboardContext().onDown(Input.KeyCode.DownArrow, function () {\n        return attemptMove(0, 1);\n      }).onDown(Input.KeyCode.LeftArrow, function () {\n        return attemptMove(-1, 0);\n      }).onDown(Input.KeyCode.RightArrow, function () {\n        return attemptMove(1, 0);\n      }).onDown(Input.KeyCode.UpArrow, function () {\n        return attemptMove(0, -1);\n      });\n      keyboard.setContext(movement);\n      var fov_spaces = [];\n      calcFOV();\n\n      function attemptMove(dx, dy) {\n        var x = player.x + dx;\n        var y = player.y + dy;\n\n        if (map.table.get({\n          x: x,\n          y: y\n        }) !== 1) {\n          player.x = x;\n          player.y = y;\n          calcFOV();\n        }\n      }\n\n      function calcFOV() {\n        fov_spaces = [];\n        fov.calculateCallback(player, 9.9, function (pos, r, v) {\n          if (v) {\n            if (explored.isInBounds(pos)) {\n              explored.set(pos, true);\n            }\n\n            fov_spaces.push({\n              pos: pos,\n              r: r,\n              v: v\n            });\n          }\n        });\n      }\n\n      var loop = function loop() {\n        terminal.clear(); // Draw all tiles\n\n        for (var _x = 0; _x < 80; _x++) {\n          for (var _y = 0; _y < 50; _y++) {\n            if (explored.get({\n              x: _x,\n              y: _y\n            })) {\n              var isAlive = map.table.get({\n                x: _x,\n                y: _y\n              }) === 1;\n\n              if (isAlive) {\n                terminal.drawCharCode({\n                  x: _x,\n                  y: _y\n                }, CharCode.blackSpadeSuit, Color.DarkGreen.toGrayscale(), Color.Green.toGrayscale());\n              } else {\n                terminal.drawCharCode({\n                  x: _x,\n                  y: _y\n                }, CharCode.fullBlock, Color.Green.toGrayscale());\n              }\n            }\n          }\n        } // Draw tiles in fov\n\n\n        var _iterator = _createForOfIteratorHelper(fov_spaces),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _step.value,\n                pos = _step$value.pos,\n                v = _step$value.v;\n\n            var _isAlive = map.table.get(pos) === 1;\n\n            if (_isAlive) {\n              terminal.drawCharCode(pos, CharCode.blackSpadeSuit, Color.DarkGreen.blend(Color.Black, (1 - v) / 2), Color.Green.blend(Color.Black, (1 - v) / 2));\n            } else {\n              terminal.drawCharCode(pos, CharCode.fullBlock, Color.Green.blend(Color.Black, (1 - v) / 2));\n            }\n          } // Draw player\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        terminal.drawCharCode({\n          x: player.x,\n          y: player.y\n        }, CharCode.at, Color.Yellow);\n        terminal.render();\n        requestAnimationFrame(loop);\n      };\n\n      requestAnimationFrame(loop);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 12\n      }, this);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/fov/basic-fov.tsx"],"names":["React","Terminal","Util","Generation","FOV","Input","CharCode","Color","mount","document","getElementById","terminal","RetroTerminal","width","height","imageURL","charWidth","charHeight","mountNode","explored","Table","map","CellularAutomata","randomize","doSimulationStep","connect","free","x","table","y","get","aliveValue","push","player","fov","PreciseShadowcasting","lightPasses","pos","topology","cartesianRange","keyboard","KeyboardHandler","movement","KeyboardContext","onDown","KeyCode","DownArrow","attemptMove","LeftArrow","RightArrow","UpArrow","setContext","fov_spaces","calcFOV","dx","dy","calculateCallback","r","v","isInBounds","set","loop","clear","isAlive","drawCharCode","blackSpadeSuit","DarkGreen","toGrayscale","Green","fullBlock","blend","Black","at","Yellow","render","requestAnimationFrame","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  Terminal,\n  Util,\n  Generation,\n  FOV,\n  Input,\n  CharCode,\n  Color,\n} from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 40,\n      height: 40,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    const explored = new Util.Table<boolean>(40, 40);\n    const map = new Generation.CellularAutomata(40, 40);\n    map.randomize(0.65);\n    map.doSimulationStep(3);\n    map.connect();\n\n    const free = [];\n    for (let x = 0; x < map.table.width; x++) {\n      for (let y = 0; y < map.table.height; y++) {\n        if (map.table.get({ x, y }) !== map.aliveValue) {\n          free.push({ x, y });\n        }\n      }\n    }\n    const player = {\n      x: free[0].x,\n      y: free[0].y,\n    };\n\n    const fov = new FOV.PreciseShadowcasting({\n      lightPasses: (pos) => map.table.get(pos) !== 1,\n      topology: \"eight\",\n      cartesianRange: true,\n    });\n\n    // Keyboard\n    const keyboard = new Input.KeyboardHandler();\n    const movement = new Input.KeyboardContext()\n      .onDown(Input.KeyCode.DownArrow, () => attemptMove(0, 1))\n      .onDown(Input.KeyCode.LeftArrow, () => attemptMove(-1, 0))\n      .onDown(Input.KeyCode.RightArrow, () => attemptMove(1, 0))\n      .onDown(Input.KeyCode.UpArrow, () => attemptMove(0, -1));\n\n    keyboard.setContext(movement);\n\n    let fov_spaces: { pos: Util.Vector2; r: number; v: number }[] = [];\n    calcFOV();\n\n    function attemptMove(dx: number, dy: number) {\n      const x = player.x + dx;\n      const y = player.y + dy;\n      if (map.table.get({ x, y }) !== 1) {\n        player.x = x;\n        player.y = y;\n        calcFOV();\n      }\n    }\n\n    function calcFOV() {\n      fov_spaces = [];\n\n      fov.calculateCallback(player, 9.9, (pos, r, v) => {\n        if (v) {\n          if (explored.isInBounds(pos)) {\n            explored.set(pos, true);\n          }\n          fov_spaces.push({ pos, r, v });\n        }\n      });\n    }\n\n    const loop = () => {\n      terminal.clear();\n\n      // Draw all tiles\n      for (let x = 0; x < 80; x++) {\n        for (let y = 0; y < 50; y++) {\n          if (explored.get({ x, y })) {\n            const isAlive = map.table.get({ x, y }) === 1;\n            if (isAlive) {\n              terminal.drawCharCode(\n                { x: x, y: y },\n                CharCode.blackSpadeSuit,\n                Color.DarkGreen.toGrayscale(),\n                Color.Green.toGrayscale()\n              );\n            } else {\n              terminal.drawCharCode(\n                { x: x, y: y },\n                CharCode.fullBlock,\n                Color.Green.toGrayscale()\n              );\n            }\n          }\n        }\n      }\n\n      // Draw tiles in fov\n      for (let { pos, v } of fov_spaces) {\n        const isAlive = map.table.get(pos) === 1;\n        if (isAlive) {\n          terminal.drawCharCode(\n            pos,\n            CharCode.blackSpadeSuit,\n            Color.DarkGreen.blend(Color.Black, (1 - v) / 2),\n            Color.Green.blend(Color.Black, (1 - v) / 2)\n          );\n        } else {\n          terminal.drawCharCode(\n            pos,\n            CharCode.fullBlock,\n            Color.Green.blend(Color.Black, (1 - v) / 2)\n          );\n        }\n      }\n\n      // Draw player\n      terminal.drawCharCode(\n        { x: player.x, y: player.y },\n        CharCode.at,\n        Color.Yellow\n      );\n\n      terminal.render();\n      requestAnimationFrame(loop);\n    };\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return <div id=\"example\" />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}