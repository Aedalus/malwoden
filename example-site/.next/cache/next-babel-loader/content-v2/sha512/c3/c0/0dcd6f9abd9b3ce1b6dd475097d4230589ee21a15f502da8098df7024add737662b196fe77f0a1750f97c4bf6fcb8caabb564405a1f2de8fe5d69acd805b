{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/fov/basic-fov.tsx\";\nimport React from \"react\";\nimport { Terminal, Util, Generation, FOV, Input, CharCode, Color } from \"malwoden\";\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 40,\n      height: 40,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount\n    });\n    const explored = new Util.Table(40, 40);\n    const map = new Generation.CellularAutomata(40, 40);\n    map.randomize(0.65);\n    map.doSimulationStep(3);\n    map.connect();\n    const free = [];\n\n    for (let x = 0; x < map.table.width; x++) {\n      for (let y = 0; y < map.table.height; y++) {\n        if (map.table.get({\n          x,\n          y\n        }) !== map.aliveValue) {\n          free.push({\n            x,\n            y\n          });\n        }\n      }\n    }\n\n    const player = {\n      x: free[0].x,\n      y: free[0].y\n    };\n    const fov = new FOV.PreciseShadowcasting({\n      lightPasses: pos => map.table.get(pos) !== 1,\n      topology: \"eight\",\n      cartesianRange: true\n    }); // Keyboard\n\n    const keyboard = new Input.KeyboardHandler();\n    const movement = new Input.KeyboardContext().onDown(Input.KeyCode.DownArrow, () => attemptMove(0, 1)).onDown(Input.KeyCode.LeftArrow, () => attemptMove(-1, 0)).onDown(Input.KeyCode.RightArrow, () => attemptMove(1, 0)).onDown(Input.KeyCode.UpArrow, () => attemptMove(0, -1));\n    keyboard.setContext(movement);\n    let fov_spaces = [];\n    calcFOV();\n\n    function attemptMove(dx, dy) {\n      const x = player.x + dx;\n      const y = player.y + dy;\n\n      if (map.table.get({\n        x,\n        y\n      }) !== 1) {\n        player.x = x;\n        player.y = y;\n        calcFOV();\n      }\n    }\n\n    function calcFOV() {\n      fov_spaces = [];\n      fov.calculateCallback(player, 9.9, (pos, r, v) => {\n        if (v) {\n          if (explored.isInBounds(pos)) {\n            explored.set(pos, true);\n          }\n\n          fov_spaces.push({\n            pos,\n            r,\n            v\n          });\n        }\n      });\n    }\n\n    const loop = () => {\n      terminal.clear(); // Draw all tiles\n\n      for (let x = 0; x < 80; x++) {\n        for (let y = 0; y < 50; y++) {\n          if (explored.get({\n            x,\n            y\n          })) {\n            const isAlive = map.table.get({\n              x,\n              y\n            }) === 1;\n\n            if (isAlive) {\n              terminal.drawCharCode({\n                x: x,\n                y: y\n              }, CharCode.blackSpadeSuit, Color.DarkGreen.toGrayscale(), Color.Green.toGrayscale());\n            } else {\n              terminal.drawCharCode({\n                x: x,\n                y: y\n              }, CharCode.fullBlock, Color.Green.toGrayscale());\n            }\n          }\n        }\n      } // Draw tiles in fov\n\n\n      for (let {\n        pos,\n        v\n      } of fov_spaces) {\n        const isAlive = map.table.get(pos) === 1;\n\n        if (isAlive) {\n          terminal.drawCharCode(pos, CharCode.blackSpadeSuit, Color.DarkGreen.blend(Color.Black, (1 - v) / 2), Color.Green.blend(Color.Black, (1 - v) / 2));\n        } else {\n          terminal.drawCharCode(pos, CharCode.fullBlock, Color.Green.blend(Color.Black, (1 - v) / 2));\n        }\n      } // Draw player\n\n\n      terminal.drawCharCode({\n        x: player.x,\n        y: player.y\n      }, CharCode.at, Color.Yellow);\n      terminal.render();\n      requestAnimationFrame(loop);\n    };\n\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/fov/basic-fov.tsx"],"names":["React","Terminal","Util","Generation","FOV","Input","CharCode","Color","Component","componentDidMount","mount","document","getElementById","terminal","RetroTerminal","width","height","imageURL","charWidth","charHeight","mountNode","explored","Table","map","CellularAutomata","randomize","doSimulationStep","connect","free","x","table","y","get","aliveValue","push","player","fov","PreciseShadowcasting","lightPasses","pos","topology","cartesianRange","keyboard","KeyboardHandler","movement","KeyboardContext","onDown","KeyCode","DownArrow","attemptMove","LeftArrow","RightArrow","UpArrow","setContext","fov_spaces","calcFOV","dx","dy","calculateCallback","r","v","isInBounds","set","loop","clear","isAlive","drawCharCode","blackSpadeSuit","DarkGreen","toGrayscale","Green","fullBlock","blend","Black","at","Yellow","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  Terminal,\n  Util,\n  Generation,\n  FOV,\n  Input,\n  CharCode,\n  Color,\n} from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 40,\n      height: 40,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    const explored = new Util.Table<boolean>(40, 40);\n    const map = new Generation.CellularAutomata(40, 40);\n    map.randomize(0.65);\n    map.doSimulationStep(3);\n    map.connect();\n\n    const free = [];\n    for (let x = 0; x < map.table.width; x++) {\n      for (let y = 0; y < map.table.height; y++) {\n        if (map.table.get({ x, y }) !== map.aliveValue) {\n          free.push({ x, y });\n        }\n      }\n    }\n    const player = {\n      x: free[0].x,\n      y: free[0].y,\n    };\n\n    const fov = new FOV.PreciseShadowcasting({\n      lightPasses: (pos) => map.table.get(pos) !== 1,\n      topology: \"eight\",\n      cartesianRange: true,\n    });\n\n    // Keyboard\n    const keyboard = new Input.KeyboardHandler();\n    const movement = new Input.KeyboardContext()\n      .onDown(Input.KeyCode.DownArrow, () => attemptMove(0, 1))\n      .onDown(Input.KeyCode.LeftArrow, () => attemptMove(-1, 0))\n      .onDown(Input.KeyCode.RightArrow, () => attemptMove(1, 0))\n      .onDown(Input.KeyCode.UpArrow, () => attemptMove(0, -1));\n\n    keyboard.setContext(movement);\n\n    let fov_spaces: { pos: Util.Vector2; r: number; v: number }[] = [];\n    calcFOV();\n\n    function attemptMove(dx: number, dy: number) {\n      const x = player.x + dx;\n      const y = player.y + dy;\n      if (map.table.get({ x, y }) !== 1) {\n        player.x = x;\n        player.y = y;\n        calcFOV();\n      }\n    }\n\n    function calcFOV() {\n      fov_spaces = [];\n\n      fov.calculateCallback(player, 9.9, (pos, r, v) => {\n        if (v) {\n          if (explored.isInBounds(pos)) {\n            explored.set(pos, true);\n          }\n          fov_spaces.push({ pos, r, v });\n        }\n      });\n    }\n\n    const loop = () => {\n      terminal.clear();\n\n      // Draw all tiles\n      for (let x = 0; x < 80; x++) {\n        for (let y = 0; y < 50; y++) {\n          if (explored.get({ x, y })) {\n            const isAlive = map.table.get({ x, y }) === 1;\n            if (isAlive) {\n              terminal.drawCharCode(\n                { x: x, y: y },\n                CharCode.blackSpadeSuit,\n                Color.DarkGreen.toGrayscale(),\n                Color.Green.toGrayscale()\n              );\n            } else {\n              terminal.drawCharCode(\n                { x: x, y: y },\n                CharCode.fullBlock,\n                Color.Green.toGrayscale()\n              );\n            }\n          }\n        }\n      }\n\n      // Draw tiles in fov\n      for (let { pos, v } of fov_spaces) {\n        const isAlive = map.table.get(pos) === 1;\n        if (isAlive) {\n          terminal.drawCharCode(\n            pos,\n            CharCode.blackSpadeSuit,\n            Color.DarkGreen.blend(Color.Black, (1 - v) / 2),\n            Color.Green.blend(Color.Black, (1 - v) / 2)\n          );\n        } else {\n          terminal.drawCharCode(\n            pos,\n            CharCode.fullBlock,\n            Color.Green.blend(Color.Black, (1 - v) / 2)\n          );\n        }\n      }\n\n      // Draw player\n      terminal.drawCharCode(\n        { x: player.x, y: player.y },\n        CharCode.at,\n        Color.Yellow\n      );\n\n      terminal.render();\n      requestAnimationFrame(loop);\n    };\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return <div id=\"example\" />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}