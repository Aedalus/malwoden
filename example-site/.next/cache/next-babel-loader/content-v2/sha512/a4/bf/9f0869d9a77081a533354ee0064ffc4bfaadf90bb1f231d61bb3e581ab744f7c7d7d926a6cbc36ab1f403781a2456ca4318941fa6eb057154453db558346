{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/basic-game.tsx\";\nimport React from \"react\";\nimport { Glyph, Terminal, Input, Color, CharCode, Generation, GUI, Rand } from \"malwoden\";\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 48,\n      height: 30,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount\n    }); // Generate Map\n\n    const map_width = 30;\n    const map_height = 20;\n    const map = new Generation.CellularAutomata(map_width, map_height);\n    map.randomize(0.7);\n    map.doSimulationStep();\n    const open = [];\n\n    for (let x = 0; x < map.table.width; x++) {\n      for (let y = 0; y < map.table.height; y++) {\n        if (map.table.get({\n          x,\n          y\n        }) === 0) open.push({\n          x,\n          y\n        });\n      }\n    }\n\n    const rng = new Rand.AleaRNG();\n    const start = rng.nextItem(open);\n    const coinPos = rng.nextItem(open);\n    const logs = [];\n\n    const addLog = txt => {\n      logs.push(txt);\n\n      while (logs.length > 5) logs.shift();\n    };\n\n    addLog(\"Collect Coins!\"); // Entities\n\n    const player = {\n      x: start.x,\n      y: start.y,\n      hp: 10,\n      coins: 0\n    };\n    const coin = {\n      x: coinPos.x,\n      y: coinPos.y\n    };\n\n    function collectCoin() {\n      player.coins++;\n      const newPos = rng.nextItem(open);\n      coin.x = newPos.x;\n      coin.y = newPos.y;\n      addLog(\"Coin!\");\n    }\n\n    function move(dx, dy) {\n      const x = player.x + dx;\n      const y = player.y + dy;\n\n      if (map.table.isInBounds({\n        x,\n        y\n      }) && map.table.get({\n        x,\n        y\n      }) === 0) {\n        player.x = x;\n        player.y = y;\n      }\n    } // Keyboard\n\n\n    const keyboard = new Input.KeyboardHandler();\n    const movement = new Input.KeyboardContext().onDown(Input.KeyCode.DownArrow, () => move(0, 1)).onDown(Input.KeyCode.LeftArrow, () => move(-1, 0)).onDown(Input.KeyCode.RightArrow, () => move(1, 0)).onDown(Input.KeyCode.UpArrow, () => move(0, -1));\n    keyboard.setContext(movement); // ToDo - Fix this API. 2 Vectors?\n\n    const mapterminal = terminal.port({\n      x: 17,\n      y: 1\n    }, map_width, map_height);\n\n    const loop = delta => {\n      // Logic\n      if (player.x === coin.x && player.y === coin.y) {\n        collectCoin();\n      } // Rendering\n\n\n      terminal.clear(); // Player Box\n\n      GUI.box(terminal, {\n        title: \"Player\",\n        x1: 0,\n        x2: 15,\n        y1: 0,\n        y2: 21\n      }); // HP\n\n      terminal.writeAt({\n        x: 2,\n        y: 2\n      }, `HP : ${player.hp}/10`, Color.Red);\n      terminal.writeAt({\n        x: 2,\n        y: 4\n      }, `Gold : ${player.coins}`, Color.Yellow); // World Box\n\n      GUI.box(terminal, {\n        x1: 16,\n        x2: 16 + 31,\n        y1: 0,\n        y2: 21\n      }); // Logs\n\n      GUI.box(terminal, {\n        title: \"Log\",\n        x1: 0,\n        x2: 16 + 31,\n        y1: 22,\n        y2: 29\n      });\n\n      for (let i = 0; i < logs.length; i++) {\n        terminal.writeAt({\n          x: 1,\n          y: 23 + i\n        }, logs[i]);\n      } // Draw Map\n\n\n      for (let x = 0; x < map.table.width; x++) {\n        for (let y = 0; y < map.table.height; y++) {\n          const isWall = map.table.get({\n            x,\n            y\n          });\n          mapterminal.drawCharCode({\n            x,\n            y\n          }, isWall ? CharCode.blackSpadeSuit : CharCode.space, isWall ? Color.Green : Color.White);\n        }\n      } // Coin\n\n\n      mapterminal.drawGlyph(coin, Glyph.fromCharCode(CharCode.oLower, Color.Yellow)); // Player Entity\n\n      mapterminal.drawGlyph(player, Glyph.fromCharCode(CharCode.at, Color.Yellow));\n      terminal.render();\n      window.requestAnimationFrame(loop);\n    };\n\n    window.requestAnimationFrame(loop);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/basic-game.tsx"],"names":["React","Glyph","Terminal","Input","Color","CharCode","Generation","GUI","Rand","Component","componentDidMount","mount","document","getElementById","terminal","RetroTerminal","width","height","imageURL","charWidth","charHeight","mountNode","map_width","map_height","map","CellularAutomata","randomize","doSimulationStep","open","x","table","y","get","push","rng","AleaRNG","start","nextItem","coinPos","logs","addLog","txt","length","shift","player","hp","coins","coin","collectCoin","newPos","move","dx","dy","isInBounds","keyboard","KeyboardHandler","movement","KeyboardContext","onDown","KeyCode","DownArrow","LeftArrow","RightArrow","UpArrow","setContext","mapterminal","port","loop","delta","clear","box","title","x1","x2","y1","y2","writeAt","Red","Yellow","i","isWall","drawCharCode","blackSpadeSuit","space","Green","White","drawGlyph","fromCharCode","oLower","at","render","window","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  Glyph,\n  Terminal,\n  Input,\n  Color,\n  CharCode,\n  Generation,\n  GUI,\n  Rand,\n} from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 48,\n      height: 30,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    // Generate Map\n    const map_width = 30;\n    const map_height = 20;\n    const map = new Generation.CellularAutomata(map_width, map_height);\n    map.randomize(0.7);\n    map.doSimulationStep();\n\n    const open = [];\n    for (let x = 0; x < map.table.width; x++) {\n      for (let y = 0; y < map.table.height; y++) {\n        if (map.table.get({ x, y }) === 0) open.push({ x, y });\n      }\n    }\n    const rng = new Rand.AleaRNG();\n    const start = rng.nextItem(open);\n    const coinPos = rng.nextItem(open);\n\n    const logs: string[] = [];\n    const addLog = (txt: string) => {\n      logs.push(txt);\n      while (logs.length > 5) logs.shift();\n    };\n    addLog(\"Collect Coins!\");\n\n    // Entities\n    const player = {\n      x: start.x,\n      y: start.y,\n      hp: 10,\n      coins: 0,\n    };\n\n    const coin = {\n      x: coinPos.x,\n      y: coinPos.y,\n    };\n\n    function collectCoin() {\n      player.coins++;\n      const newPos = rng.nextItem(open);\n      coin.x = newPos.x;\n      coin.y = newPos.y;\n      addLog(\"Coin!\");\n    }\n\n    function move(dx: number, dy: number) {\n      const x = player.x + dx;\n      const y = player.y + dy;\n      if (map.table.isInBounds({ x, y }) && map.table.get({ x, y }) === 0) {\n        player.x = x;\n        player.y = y;\n      }\n    }\n\n    // Keyboard\n    const keyboard = new Input.KeyboardHandler();\n    const movement = new Input.KeyboardContext()\n      .onDown(Input.KeyCode.DownArrow, () => move(0, 1))\n      .onDown(Input.KeyCode.LeftArrow, () => move(-1, 0))\n      .onDown(Input.KeyCode.RightArrow, () => move(1, 0))\n      .onDown(Input.KeyCode.UpArrow, () => move(0, -1));\n\n    keyboard.setContext(movement);\n\n    // ToDo - Fix this API. 2 Vectors?\n    const mapterminal = terminal.port({ x: 17, y: 1 }, map_width, map_height);\n\n    const loop = (delta: number) => {\n      // Logic\n      if (player.x === coin.x && player.y === coin.y) {\n        collectCoin();\n      }\n\n      // Rendering\n      terminal.clear();\n\n      // Player Box\n      GUI.box(terminal, {\n        title: \"Player\",\n        x1: 0,\n        x2: 15,\n        y1: 0,\n        y2: 21,\n      });\n\n      // HP\n      terminal.writeAt({ x: 2, y: 2 }, `HP : ${player.hp}/10`, Color.Red);\n      terminal.writeAt({ x: 2, y: 4 }, `Gold : ${player.coins}`, Color.Yellow);\n\n      // World Box\n      GUI.box(terminal, {\n        x1: 16,\n        x2: 16 + 31,\n        y1: 0,\n        y2: 21,\n      });\n\n      // Logs\n      GUI.box(terminal, {\n        title: \"Log\",\n        x1: 0,\n        x2: 16 + 31,\n        y1: 22,\n        y2: 29,\n      });\n      for (let i = 0; i < logs.length; i++) {\n        terminal.writeAt({ x: 1, y: 23 + i }, logs[i]);\n      }\n\n      // Draw Map\n      for (let x = 0; x < map.table.width; x++) {\n        for (let y = 0; y < map.table.height; y++) {\n          const isWall = map.table.get({ x, y });\n          mapterminal.drawCharCode(\n            { x, y },\n            isWall ? CharCode.blackSpadeSuit : CharCode.space,\n            isWall ? Color.Green : Color.White\n          );\n        }\n      }\n\n      // Coin\n      mapterminal.drawGlyph(\n        coin,\n        Glyph.fromCharCode(CharCode.oLower, Color.Yellow)\n      );\n      // Player Entity\n      mapterminal.drawGlyph(\n        player,\n        Glyph.fromCharCode(CharCode.at, Color.Yellow)\n      );\n\n      terminal.render();\n\n      window.requestAnimationFrame(loop);\n    };\n    window.requestAnimationFrame(loop);\n  }\n\n  render() {\n    return <div id=\"example\"></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}