{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/input/mouse-input.tsx\";\nimport React from \"react\";\nimport { CharCode, Color, Terminal, Input } from \"malwoden\";\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const width = 48;\n    const height = 30;\n    const terminal = new Terminal.RetroTerminal({\n      width,\n      height,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount\n    });\n    let clickMessage = \"Try Clicking!\";\n    const mouse = new Input.MouseHandler();\n    const c = new Input.MouseContext().onMouseDown(pos => {\n      const termPos = terminal.pixelToChar(pos);\n      clickMessage = `mousedown on ${termPos.x}, ${termPos.y}`;\n    }).onMouseUp(pos => {\n      const termPos = terminal.pixelToChar(pos);\n      clickMessage = `mouseup on ${termPos.x}, ${termPos.y}`;\n    });\n    mouse.setContext(c);\n\n    function loop() {\n      terminal.clear(); // Draw mouse position\n\n      const mousePos = mouse.getPos();\n      const char = terminal.pixelToChar(mousePos);\n      terminal.drawCharCode(char, CharCode.at, Color.Yellow); // Draw mouse message\n\n      terminal.writeAt({\n        x: 0,\n        y: 0\n      }, clickMessage); // Render\n\n      terminal.render();\n      requestAnimationFrame(loop);\n    }\n\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/input/mouse-input.tsx"],"names":["React","CharCode","Color","Terminal","Input","Component","componentDidMount","mount","document","getElementById","width","height","terminal","RetroTerminal","imageURL","charWidth","charHeight","mountNode","clickMessage","mouse","MouseHandler","c","MouseContext","onMouseDown","pos","termPos","pixelToChar","x","y","onMouseUp","setContext","loop","clear","mousePos","getPos","char","drawCharCode","at","Yellow","writeAt","render","requestAnimationFrame"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,KAApC,QAAuD,UAAvD;AAEA,eAAe,cAAcJ,KAAK,CAACK,SAApB,CAA8B;AAC3CC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAIT,QAAQ,CAACU,aAAb,CAA2B;AAC1CH,MAAAA,KAD0C;AAE1CC,MAAAA,MAF0C;AAG1CG,MAAAA,QAAQ,EAAE,cAHgC;AAI1CC,MAAAA,SAAS,EAAE,EAJ+B;AAK1CC,MAAAA,UAAU,EAAE,EAL8B;AAM1CC,MAAAA,SAAS,EAAEV;AAN+B,KAA3B,CAAjB;AASA,QAAIW,YAAY,GAAG,eAAnB;AACA,UAAMC,KAAK,GAAG,IAAIf,KAAK,CAACgB,YAAV,EAAd;AACA,UAAMC,CAAC,GAAG,IAAIjB,KAAK,CAACkB,YAAV,GACPC,WADO,CACMC,GAAD,IAAS;AACpB,YAAMC,OAAO,GAAGb,QAAQ,CAACc,WAAT,CAAqBF,GAArB,CAAhB;AACAN,MAAAA,YAAY,GAAI,gBAAeO,OAAO,CAACE,CAAE,KAAIF,OAAO,CAACG,CAAE,EAAvD;AACD,KAJO,EAKPC,SALO,CAKIL,GAAD,IAAS;AAClB,YAAMC,OAAO,GAAGb,QAAQ,CAACc,WAAT,CAAqBF,GAArB,CAAhB;AACAN,MAAAA,YAAY,GAAI,cAAaO,OAAO,CAACE,CAAE,KAAIF,OAAO,CAACG,CAAE,EAArD;AACD,KARO,CAAV;AASAT,IAAAA,KAAK,CAACW,UAAN,CAAiBT,CAAjB;;AAEA,aAASU,IAAT,GAAgB;AACdnB,MAAAA,QAAQ,CAACoB,KAAT,GADc,CAEd;;AACA,YAAMC,QAAQ,GAAGd,KAAK,CAACe,MAAN,EAAjB;AACA,YAAMC,IAAI,GAAGvB,QAAQ,CAACc,WAAT,CAAqBO,QAArB,CAAb;AACArB,MAAAA,QAAQ,CAACwB,YAAT,CAAsBD,IAAtB,EAA4BlC,QAAQ,CAACoC,EAArC,EAAyCnC,KAAK,CAACoC,MAA/C,EALc,CAOd;;AACA1B,MAAAA,QAAQ,CAAC2B,OAAT,CAAiB;AAAEZ,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAjB,EAAiCV,YAAjC,EARc,CAUd;;AACAN,MAAAA,QAAQ,CAAC4B,MAAT;AACAC,MAAAA,qBAAqB,CAACV,IAAD,CAArB;AACD;;AACDU,IAAAA,qBAAqB,CAACV,IAAD,CAArB;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA9C0C","sourcesContent":["import React from \"react\";\n\nimport { CharCode, Color, Terminal, Input, Util } from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const width = 48;\n    const height = 30;\n    const terminal = new Terminal.RetroTerminal({\n      width,\n      height,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    let clickMessage = \"Try Clicking!\";\n    const mouse = new Input.MouseHandler();\n    const c = new Input.MouseContext()\n      .onMouseDown((pos) => {\n        const termPos = terminal.pixelToChar(pos);\n        clickMessage = `mousedown on ${termPos.x}, ${termPos.y}`;\n      })\n      .onMouseUp((pos) => {\n        const termPos = terminal.pixelToChar(pos);\n        clickMessage = `mouseup on ${termPos.x}, ${termPos.y}`;\n      });\n    mouse.setContext(c);\n\n    function loop() {\n      terminal.clear();\n      // Draw mouse position\n      const mousePos = mouse.getPos();\n      const char = terminal.pixelToChar(mousePos);\n      terminal.drawCharCode(char, CharCode.at, Color.Yellow);\n\n      // Draw mouse message\n      terminal.writeAt({ x: 0, y: 0 }, clickMessage);\n\n      // Render\n      terminal.render();\n      requestAnimationFrame(loop);\n    }\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return <div id=\"example\"></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}