{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/pathfinding/dijkstra.tsx\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { CharCode, Color, Terminal, Input, Generation, Glyph, Rand, Pathfinding } from \"malwoden\";\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var mount = document.getElementById(\"example\");\n      var width = 48;\n      var height = 30;\n      var terminal = new Terminal.RetroTerminal({\n        width: width,\n        height: height,\n        imageURL: \"/font_16.png\",\n        charWidth: 16,\n        charHeight: 16,\n        mountNode: mount\n      }); // ToDo\n\n      var mouse = new Input.MouseHandler();\n      var map = new Generation.CellularAutomata(width, height);\n      map.randomize();\n      map.doSimulationStep(4);\n      map.connect(); // Get a random free spot\n\n      var freeSpots = [];\n\n      for (var x = 0; x < width; x++) {\n        for (var y = 0; y < height; y++) {\n          var wall = map.table.get({\n            x: x,\n            y: y\n          });\n          if (!wall) freeSpots.push({\n            x: x,\n            y: y\n          });\n        }\n      }\n\n      var player = new Rand.AleaRNG().nextItem(freeSpots);\n      var dijkstra = new Pathfinding.Dijkstra({\n        isBlockedCallback: function isBlockedCallback(pos) {\n          return map.table.get(pos) != 0;\n        },\n        topology: \"eight\"\n      });\n\n      function loop() {\n        terminal.clear(); // Draw Map\n\n        for (var _x = 0; _x < width; _x++) {\n          for (var _y = 0; _y < height; _y++) {\n            var _wall = map.table.get({\n              x: _x,\n              y: _y\n            });\n\n            if (_wall) terminal.drawGlyph({\n              x: _x,\n              y: _y\n            }, Glyph.fromCharCode(CharCode.blackClubSuit, Color.Green));\n          }\n        } // Draw Mouse\n\n\n        var mousePos = mouse.getPos();\n        var tilePos = terminal.pixelToChar(mousePos);\n        terminal.drawCharCode(tilePos, CharCode.asterisk, Color.Cyan); // Get path\n\n        var path = dijkstra.compute(player, tilePos);\n        console.log(path);\n\n        if (path) {\n          var _iterator = _createForOfIteratorHelper(path),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var p = _step.value;\n              terminal.drawCharCode(p, CharCode.asterisk, Color.DarkCyan);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } // Draw Player\n\n\n        terminal.drawCharCode(player, CharCode.at, Color.Yellow); // Render Terminal\n\n        terminal.render();\n        requestAnimationFrame(loop);\n      }\n\n      requestAnimationFrame(loop);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }, this);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/pathfinding/dijkstra.tsx"],"names":["React","CharCode","Color","Terminal","Input","Generation","Glyph","Rand","Pathfinding","mount","document","getElementById","width","height","terminal","RetroTerminal","imageURL","charWidth","charHeight","mountNode","mouse","MouseHandler","map","CellularAutomata","randomize","doSimulationStep","connect","freeSpots","x","y","wall","table","get","push","player","AleaRNG","nextItem","dijkstra","Dijkstra","isBlockedCallback","pos","topology","loop","clear","drawGlyph","fromCharCode","blackClubSuit","Green","mousePos","getPos","tilePos","pixelToChar","drawCharCode","asterisk","Cyan","path","compute","console","log","p","DarkCyan","at","Yellow","render","requestAnimationFrame","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  CharCode,\n  Color,\n  Terminal,\n  Input,\n  Generation,\n  Glyph,\n  Util,\n  Rand,\n  Pathfinding,\n} from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const width = 48;\n    const height = 30;\n    const terminal = new Terminal.RetroTerminal({\n      width,\n      height,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    // ToDo\n    const mouse = new Input.MouseHandler();\n    const map = new Generation.CellularAutomata(width, height);\n    map.randomize();\n    map.doSimulationStep(4);\n    map.connect();\n\n    // Get a random free spot\n    const freeSpots: Util.Vector2[] = [];\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const wall = map.table.get({ x, y });\n        if (!wall) freeSpots.push({ x, y });\n      }\n    }\n\n    const player = new Rand.AleaRNG().nextItem(freeSpots);\n\n    const dijkstra = new Pathfinding.Dijkstra({\n      isBlockedCallback: (pos) => map.table.get(pos) != 0,\n      topology: \"eight\",\n    });\n\n\n    function loop() {\n      terminal.clear();\n\n      // Draw Map\n      for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n          const wall = map.table.get({ x, y });\n          if (wall)\n            terminal.drawGlyph(\n              { x, y },\n              Glyph.fromCharCode(CharCode.blackClubSuit, Color.Green)\n            );\n        }\n      }\n\n      // Draw Mouse\n      const mousePos = mouse.getPos();\n      const tilePos = terminal.pixelToChar(mousePos);\n      terminal.drawCharCode(tilePos, CharCode.asterisk, Color.Cyan);\n\n      // Get path\n      const path = dijkstra.compute(player, tilePos);\n      console.log(path);\n      if (path) {\n        for (let p of path) {\n          terminal.drawCharCode(p, CharCode.asterisk, Color.DarkCyan);\n        }\n      }\n\n      // Draw Player\n      terminal.drawCharCode(player, CharCode.at, Color.Yellow);\n\n      // Render Terminal\n      terminal.render();\n      requestAnimationFrame(loop);\n    }\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return <div id=\"example\"></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}