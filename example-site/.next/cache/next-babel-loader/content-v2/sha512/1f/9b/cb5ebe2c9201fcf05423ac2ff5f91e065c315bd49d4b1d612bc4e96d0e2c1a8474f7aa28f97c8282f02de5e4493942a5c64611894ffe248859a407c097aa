{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/generation/cellular.tsx\";\nimport React from \"react\";\nimport { Terminal, Generation, CharCode, Color } from \"malwoden\";\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 40,\n      height: 40,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount\n    });\n    const map = new Generation.CellularAutomata(40, 40);\n    map.randomize(0.6);\n    map.doSimulationStep(3);\n    terminal.clear();\n\n    for (let x = 0; x < 80; x++) {\n      for (let y = 0; y < 50; y++) {\n        const isAlive = map.table.get({\n          x: x,\n          y: y\n        }) === 1;\n\n        if (isAlive) {\n          const color = Math.random() > 0.5 ? Color.Green : Color.DarkGreen;\n          terminal.drawCharCode({\n            x,\n            y\n          }, CharCode.blackSpadeSuit, color);\n        }\n      }\n    }\n\n    terminal.render();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/generation/cellular.tsx"],"names":["React","Terminal","Generation","CharCode","Color","Component","componentDidMount","mount","document","getElementById","terminal","RetroTerminal","width","height","imageURL","charWidth","charHeight","mountNode","map","CellularAutomata","randomize","doSimulationStep","clear","x","y","isAlive","table","get","color","Math","random","Green","DarkGreen","drawCharCode","blackSpadeSuit","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,KAAzC,QAAsD,UAAtD;AAEA,eAAe,cAAcJ,KAAK,CAACK,SAApB,CAA8B;AAC3CC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;AACA,UAAMC,QAAQ,GAAG,IAAIT,QAAQ,CAACU,aAAb,CAA2B;AAC1CC,MAAAA,KAAK,EAAE,EADmC;AAE1CC,MAAAA,MAAM,EAAE,EAFkC;AAG1CC,MAAAA,QAAQ,EAAE,cAHgC;AAI1CC,MAAAA,SAAS,EAAE,EAJ+B;AAK1CC,MAAAA,UAAU,EAAE,EAL8B;AAM1CC,MAAAA,SAAS,EAAEV;AAN+B,KAA3B,CAAjB;AASA,UAAMW,GAAG,GAAG,IAAIhB,UAAU,CAACiB,gBAAf,CAAgC,EAAhC,EAAoC,EAApC,CAAZ;AACAD,IAAAA,GAAG,CAACE,SAAJ,CAAc,GAAd;AACAF,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,CAArB;AAEAX,IAAAA,QAAQ,CAACY,KAAT;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAMC,OAAO,GAAGP,GAAG,CAACQ,KAAJ,CAAUC,GAAV,CAAc;AAAEJ,UAAAA,CAAC,EAAEA,CAAL;AAAQC,UAAAA,CAAC,EAAEA;AAAX,SAAd,MAAkC,CAAlD;;AACA,YAAIC,OAAJ,EAAa;AACX,gBAAMG,KAAK,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB1B,KAAK,CAAC2B,KAA5B,GAAoC3B,KAAK,CAAC4B,SAAxD;AACAtB,UAAAA,QAAQ,CAACuB,YAAT,CAAsB;AAAEV,YAAAA,CAAF;AAAKC,YAAAA;AAAL,WAAtB,EAAgCrB,QAAQ,CAAC+B,cAAzC,EAAyDN,KAAzD;AACD;AACF;AACF;;AACDlB,IAAAA,QAAQ,CAACyB,MAAT;AACD;;AACDA,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA9B0C","sourcesContent":["import React from \"react\";\n\nimport { Terminal, Generation, CharCode, Color } from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const terminal = new Terminal.RetroTerminal({\n      width: 40,\n      height: 40,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    const map = new Generation.CellularAutomata(40, 40);\n    map.randomize(0.6);\n    map.doSimulationStep(3);\n\n    terminal.clear();\n    for (let x = 0; x < 80; x++) {\n      for (let y = 0; y < 50; y++) {\n        const isAlive = map.table.get({ x: x, y: y }) === 1;\n        if (isAlive) {\n          const color = Math.random() > 0.5 ? Color.Green : Color.DarkGreen;\n          terminal.drawCharCode({ x, y }, CharCode.blackSpadeSuit, color);\n        }\n      }\n    }\n    terminal.render();\n  }\n  render() {\n    return <div id=\"example\" />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}