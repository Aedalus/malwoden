{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuabevers/git/cacti-term/example-site/examples/pathfinding/dijkstra.tsx\";\nimport React from \"react\";\nimport { CharCode, Color, Terminal, Input, Generation, Glyph, Rand, Pathfinding } from \"malwoden\";\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const width = 48;\n    const height = 30;\n    const terminal = new Terminal.RetroTerminal({\n      width,\n      height,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount\n    }); // ToDo\n\n    const mouse = new Input.MouseHandler();\n    const map = new Generation.CellularAutomata(width, height);\n    map.randomize();\n    map.doSimulationStep(4);\n    map.connect(); // Get a random free spot\n\n    const freeSpots = [];\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const wall = map.table.get({\n          x,\n          y\n        });\n        if (!wall) freeSpots.push({\n          x,\n          y\n        });\n      }\n    }\n\n    const player = new Rand.AleaRNG().nextItem(freeSpots);\n    const dijkstra = new Pathfinding.Dijkstra({\n      isBlockedCallback: pos => map.table.get(pos) != 0,\n      topology: \"eight\"\n    });\n\n    function loop() {\n      terminal.clear(); // Draw Map\n\n      for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n          const wall = map.table.get({\n            x,\n            y\n          });\n          if (wall) terminal.drawGlyph({\n            x,\n            y\n          }, Glyph.fromCharCode(CharCode.blackClubSuit, Color.Green));\n        }\n      } // Draw Mouse\n\n\n      const mousePos = mouse.getPos();\n      const tilePos = terminal.pixelToChar(mousePos);\n      terminal.drawCharCode(tilePos, CharCode.asterisk, Color.Cyan); // Get path\n\n      const path = dijkstra.compute(player, tilePos);\n      console.log(path);\n\n      if (path) {\n        for (let p of path) {\n          terminal.drawCharCode(p, CharCode.asterisk, Color.DarkCyan);\n        }\n      } // Draw Player\n\n\n      terminal.drawCharCode(player, CharCode.at, Color.Yellow); // Render Terminal\n\n      terminal.render();\n      requestAnimationFrame(loop);\n    }\n\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshuabevers/git/cacti-term/example-site/examples/pathfinding/dijkstra.tsx"],"names":["React","CharCode","Color","Terminal","Input","Generation","Glyph","Rand","Pathfinding","Component","componentDidMount","mount","document","getElementById","width","height","terminal","RetroTerminal","imageURL","charWidth","charHeight","mountNode","mouse","MouseHandler","map","CellularAutomata","randomize","doSimulationStep","connect","freeSpots","x","y","wall","table","get","push","player","AleaRNG","nextItem","dijkstra","Dijkstra","isBlockedCallback","pos","topology","loop","clear","drawGlyph","fromCharCode","blackClubSuit","Green","mousePos","getPos","tilePos","pixelToChar","drawCharCode","asterisk","Cyan","path","compute","console","log","p","DarkCyan","at","Yellow","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  CharCode,\n  Color,\n  Terminal,\n  Input,\n  Generation,\n  Glyph,\n  Util,\n  Rand,\n  Pathfinding,\n} from \"malwoden\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    const mount = document.getElementById(\"example\");\n    const width = 48;\n    const height = 30;\n    const terminal = new Terminal.RetroTerminal({\n      width,\n      height,\n      imageURL: \"/font_16.png\",\n      charWidth: 16,\n      charHeight: 16,\n      mountNode: mount,\n    });\n\n    // ToDo\n    const mouse = new Input.MouseHandler();\n    const map = new Generation.CellularAutomata(width, height);\n    map.randomize();\n    map.doSimulationStep(4);\n    map.connect();\n\n    // Get a random free spot\n    const freeSpots: Util.Vector2[] = [];\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const wall = map.table.get({ x, y });\n        if (!wall) freeSpots.push({ x, y });\n      }\n    }\n\n    const player = new Rand.AleaRNG().nextItem(freeSpots);\n\n    const dijkstra = new Pathfinding.Dijkstra({\n      isBlockedCallback: (pos) => map.table.get(pos) != 0,\n      topology: \"eight\",\n    });\n\n\n    function loop() {\n      terminal.clear();\n\n      // Draw Map\n      for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n          const wall = map.table.get({ x, y });\n          if (wall)\n            terminal.drawGlyph(\n              { x, y },\n              Glyph.fromCharCode(CharCode.blackClubSuit, Color.Green)\n            );\n        }\n      }\n\n      // Draw Mouse\n      const mousePos = mouse.getPos();\n      const tilePos = terminal.pixelToChar(mousePos);\n      terminal.drawCharCode(tilePos, CharCode.asterisk, Color.Cyan);\n\n      // Get path\n      const path = dijkstra.compute(player, tilePos);\n      console.log(path);\n      if (path) {\n        for (let p of path) {\n          terminal.drawCharCode(p, CharCode.asterisk, Color.DarkCyan);\n        }\n      }\n\n      // Draw Player\n      terminal.drawCharCode(player, CharCode.at, Color.Yellow);\n\n      // Render Terminal\n      terminal.render();\n      requestAnimationFrame(loop);\n    }\n    requestAnimationFrame(loop);\n  }\n\n  render() {\n    return (\n    <>\n        <div id=\"example\">\n\n    </div></>\n    )}\n}\n"]},"metadata":{},"sourceType":"module"}