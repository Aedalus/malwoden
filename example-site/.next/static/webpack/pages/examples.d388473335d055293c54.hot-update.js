webpackHotUpdate_N_E("pages/examples",{

/***/ "../dist/malwoden.es5.js":
/*!*******************************!*\
  !*** ../dist/malwoden.es5.js ***!
  \*******************************/
/*! exports provided: Terminal, Input, Generation, Pathfinding, GUI, Rand, Util, FOV, CharCode, Glyph, Color */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Terminal\", function() { return index; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return index$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Generation\", function() { return index$4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pathfinding\", function() { return index$5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GUI\", function() { return index$6; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rand\", function() { return index$3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Util\", function() { return index$2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FOV\", function() { return index$7; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CharCode\", function() { return CharCode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Glyph\", function() { return Glyph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar Color = /** @class */ (function () {\r\n    function Color(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n    Color.prototype.isEqual = function (color) {\r\n        return this.r === color.r && this.g === color.g && this.b === color.b;\r\n    };\r\n    Color.prototype.cssColor = function () {\r\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\r\n    };\r\n    Color.prototype.sanitizeElement = function (rgb) {\r\n        return Math.round(Math.min(Math.max(rgb, 0), 255));\r\n    };\r\n    Color.prototype.add = function (other, fractionOther) {\r\n        if (fractionOther === void 0) { fractionOther = 1; }\r\n        return new Color(this.sanitizeElement(this.r + other.r * fractionOther), this.sanitizeElement(this.g + other.g * fractionOther), this.sanitizeElement(this.b + other.b * fractionOther));\r\n    };\r\n    Color.prototype.blend = function (other, fractionOther) {\r\n        if (fractionOther === void 0) { fractionOther = 0.5; }\r\n        var fractionThis = 1.0 - fractionOther;\r\n        return new Color(this.sanitizeElement(this.r * fractionThis + other.r * fractionOther), this.sanitizeElement(this.g * fractionThis + other.g * fractionOther), this.sanitizeElement(this.b * fractionThis + other.b * fractionOther));\r\n    };\r\n    Color.prototype.blendPercent = function (other, percentOther) {\r\n        return this.blend(other, percentOther / 100);\r\n    };\r\n    Color.prototype.toGrayscale = function () {\r\n        var total = this.r + this.g + this.b;\r\n        return new Color(this.sanitizeElement(total / 3), this.sanitizeElement(total / 3), this.sanitizeElement(total / 3));\r\n    };\r\n    // CSS Extended Color Palette\r\n    // https://en.wikipedia.org/wiki/Web_colors\r\n    // Pink Colors\r\n    Color.MediumVioletRed = new Color(199, 21, 133);\r\n    Color.DeepPink = new Color(255, 20, 147);\r\n    Color.PaleVioletRed = new Color(219, 112, 147);\r\n    Color.HotPink = new Color(255, 105, 180);\r\n    Color.LightPink = new Color(255, 182, 193);\r\n    Color.Pink = new Color(255, 192, 203);\r\n    // Red Colors\r\n    Color.DarkRed = new Color(139, 0, 0);\r\n    Color.Red = new Color(255, 0, 0);\r\n    Color.Firebrick = new Color(178, 34, 34);\r\n    Color.Crimson = new Color(220, 20, 60);\r\n    Color.IndianRed = new Color(205, 92, 92);\r\n    Color.LightCoral = new Color(240, 128, 128);\r\n    Color.Salmon = new Color(250, 128, 114);\r\n    Color.DarkSalmon = new Color(233, 150, 122);\r\n    Color.LightSalmon = new Color(255, 160, 122);\r\n    // Orange Colors\r\n    Color.OrangeRed = new Color(255, 69, 0);\r\n    Color.Tomato = new Color(255, 99, 71);\r\n    Color.DarkOrange = new Color(255, 140, 0);\r\n    Color.Coral = new Color(255, 127, 80);\r\n    Color.Orange = new Color(255, 165, 0);\r\n    // Yellow Colors\r\n    Color.DarkKhaki = new Color(189, 183, 107);\r\n    Color.Gold = new Color(255, 215, 0);\r\n    Color.Khaki = new Color(240, 230, 140);\r\n    Color.PeachPuff = new Color(255, 218, 185);\r\n    Color.Yellow = new Color(255, 255, 0);\r\n    Color.PaleGoldenrod = new Color(238, 232, 170);\r\n    Color.Moccasin = new Color(255, 228, 181);\r\n    Color.PapayaWhip = new Color(255, 239, 213);\r\n    Color.LightGoldenrodYellow = new Color(250, 250, 210);\r\n    Color.LemonChiffon = new Color(255, 250, 205);\r\n    Color.LightYellow = new Color(255, 255, 224);\r\n    // Brown Colors\r\n    Color.Maroon = new Color(128, 0, 0);\r\n    Color.Brown = new Color(165, 42, 42);\r\n    Color.SaddleBrown = new Color(139, 69, 19);\r\n    Color.Sienna = new Color(160, 82, 45);\r\n    Color.Chocolate = new Color(210, 105, 30);\r\n    Color.DarkGoldenrod = new Color(184, 134, 11);\r\n    Color.Peru = new Color(205, 133, 63);\r\n    Color.RosyBrown = new Color(188, 143, 143);\r\n    Color.Goldenrod = new Color(218, 165, 32);\r\n    Color.SandyBrown = new Color(244, 164, 96);\r\n    Color.Tan = new Color(210, 180, 140);\r\n    Color.Burlywood = new Color(222, 184, 135);\r\n    Color.Wheat = new Color(245, 222, 179);\r\n    Color.NavajoWhite = new Color(255, 222, 173);\r\n    Color.Bisque = new Color(255, 228, 196);\r\n    Color.BlanchedAlmond = new Color(255, 235, 205);\r\n    Color.Cornsilk = new Color(255, 248, 220);\r\n    // Purple/Violet/Magenta Colors\r\n    Color.Indigo = new Color(75, 0, 130);\r\n    Color.Purple = new Color(128, 0, 128);\r\n    Color.DarkMagenta = new Color(139, 9, 139);\r\n    Color.DarkViolet = new Color(148, 0, 211);\r\n    Color.DarkSlateBlue = new Color(72, 61, 129);\r\n    Color.BlueViolet = new Color(138, 43, 226);\r\n    Color.DarkOrchid = new Color(153, 50, 204);\r\n    Color.Fuchsia = new Color(255, 0, 255);\r\n    Color.Magenta = new Color(255, 0, 255); // Alias Fuchsia\r\n    Color.SlateBlue = new Color(106, 90, 205);\r\n    Color.MediumSlateBlue = new Color(123, 104, 238);\r\n    Color.MediumOrchid = new Color(186, 85, 211);\r\n    Color.MediumPurple = new Color(147, 112, 219);\r\n    Color.Orchid = new Color(218, 11, 214);\r\n    Color.Violet = new Color(238, 130, 238);\r\n    Color.Plum = new Color(221, 160, 221);\r\n    Color.Thistle = new Color(216, 191, 216);\r\n    Color.Lavender = new Color(230, 230, 250);\r\n    // White Colors\r\n    Color.MistyRose = new Color(255, 228, 225);\r\n    Color.AntiqueWhite = new Color(250, 235, 215);\r\n    Color.Linen = new Color(250, 240, 230);\r\n    Color.Beige = new Color(245, 245, 220);\r\n    Color.WhiteSmoke = new Color(245, 245, 245);\r\n    Color.LavenderBlush = new Color(255, 240, 245);\r\n    Color.OldLace = new Color(253, 245, 230);\r\n    Color.AliceBlue = new Color(240, 248, 255);\r\n    Color.Seashell = new Color(255, 245, 238);\r\n    Color.GhostWhite = new Color(248, 248, 255);\r\n    Color.Honeydew = new Color(240, 255, 240);\r\n    Color.FloralWhite = new Color(255, 250, 240);\r\n    Color.Azure = new Color(240, 255, 255);\r\n    Color.MintCream = new Color(245, 255, 250);\r\n    Color.Snow = new Color(255, 250, 250);\r\n    Color.Ivory = new Color(255, 255, 240);\r\n    Color.White = new Color(255, 255, 255);\r\n    // Grey + Black Colors\r\n    Color.Black = new Color(0, 0, 0);\r\n    Color.DarkSlateGray = new Color(47, 79, 79);\r\n    Color.DimGray = new Color(105, 105, 105);\r\n    Color.SlateGray = new Color(112, 128, 144);\r\n    Color.Gray = new Color(128, 128, 128);\r\n    Color.LightSlateGray = new Color(119, 136, 153);\r\n    Color.DarkGray = new Color(169, 169, 169);\r\n    Color.Silver = new Color(192, 192, 192);\r\n    Color.LightGray = new Color(211, 211, 211);\r\n    Color.Gainsboro = new Color(220, 220, 220);\r\n    // Green Colors\r\n    Color.DarkGreen = new Color(0, 100, 0);\r\n    Color.Green = new Color(0, 128, 0);\r\n    Color.DarkOliveGreen = new Color(85, 107, 47);\r\n    Color.ForestGreen = new Color(34, 139, 34);\r\n    Color.SeaGreen = new Color(46, 139, 87);\r\n    Color.Olive = new Color(128, 128, 0);\r\n    Color.OliveDrab = new Color(107, 142, 35);\r\n    Color.MediumSeaGreen = new Color(60, 179, 113);\r\n    Color.LimeGreen = new Color(50, 205, 50);\r\n    Color.Lime = new Color(0, 255, 0);\r\n    Color.SpringGreen = new Color(0, 255, 127);\r\n    Color.MediumSpringGreen = new Color(0, 250, 154);\r\n    Color.DarkSeaGreen = new Color(143, 188, 143);\r\n    Color.MediumAquamarine = new Color(102, 205, 170);\r\n    Color.YellowGreen = new Color(154, 205, 50);\r\n    Color.LawnGreen = new Color(124, 252, 0);\r\n    Color.Chartreuse = new Color(127, 255, 0);\r\n    Color.LightGreen = new Color(133, 238, 144);\r\n    Color.GreenYellow = new Color(173, 255, 47);\r\n    Color.PaleGreen = new Color(152, 251, 152);\r\n    // Cyan Colors\r\n    Color.Teal = new Color(0, 128, 128);\r\n    Color.DarkCyan = new Color(0, 139, 139);\r\n    Color.LightSeaGreen = new Color(32, 178, 170);\r\n    Color.CadetBlue = new Color(95, 158, 160);\r\n    Color.DarkTurquoise = new Color(0, 206, 209);\r\n    Color.MediumTurquoise = new Color(72, 209, 204);\r\n    Color.Turquoise = new Color(64, 224, 208);\r\n    Color.Aqua = new Color(0, 255, 255);\r\n    Color.Cyan = new Color(0, 255, 255);\r\n    Color.Aquamarine = new Color(127, 255, 212);\r\n    Color.PaleTurquoise = new Color(175, 238, 238);\r\n    Color.LightCyan = new Color(244, 255, 255);\r\n    // Blue Colors\r\n    Color.Navy = new Color(0, 0, 128);\r\n    Color.DarkBlue = new Color(0, 0, 139);\r\n    Color.MediumBlue = new Color(0, 0, 205);\r\n    Color.Blue = new Color(0, 0, 225);\r\n    Color.MidnightBlue = new Color(25, 25, 112);\r\n    Color.RoyalBlue = new Color(65, 105, 225);\r\n    Color.SteelBlue = new Color(70, 130, 180);\r\n    Color.DodgerBlue = new Color(30, 144, 255);\r\n    Color.DeepSkyBlue = new Color(0, 191, 255);\r\n    Color.CornflowerBlue = new Color(100, 149, 237);\r\n    Color.SkyBlue = new Color(135, 206, 235);\r\n    Color.LightSkyBlue = new Color(135, 206, 250);\r\n    Color.LightSteelBlue = new Color(176, 196, 222);\r\n    Color.LightBlue = new Color(173, 216, 230);\r\n    Color.PowderBlue = new Color(176, 224, 230);\r\n    return Color;\r\n}());\r\n//# sourceMappingURL=color.js.map\n\n/**\r\n * Represents a glyph to be drawn to the screen.\r\n */\r\nvar Glyph = /** @class */ (function () {\r\n    /**\r\n     * Creates a Glyph from a single character.\r\n     *\r\n     * @param char - A single character.\r\n     * @param fore - A foreground color (default white)\r\n     * @param back - A background color (default black)\r\n     */\r\n    function Glyph(char, fore, back) {\r\n        if (fore === void 0) { fore = Color.White; }\r\n        if (back === void 0) { back = Color.Black; }\r\n        this.char = char.charCodeAt(0);\r\n        this.fore = fore;\r\n        this.back = back;\r\n    }\r\n    /**\r\n     * Creates a glyph from a charCode.\r\n     *\r\n     * @param char - A number representing a charCode.\r\n     * @param fore - A foreground color (default white)\r\n     * @param back - A background color (default black)\r\n     */\r\n    Glyph.fromCharCode = function (char, fore, back) {\r\n        if (fore === void 0) { fore = Color.White; }\r\n        if (back === void 0) { back = Color.Black; }\r\n        return new Glyph(String.fromCharCode(char), fore, back);\r\n    };\r\n    /**\r\n     * Checks to see if two glyphs are equal.\r\n     * @param other Glyph - The other glyph.\r\n     */\r\n    Glyph.prototype.isEqual = function (other) {\r\n        if (other instanceof Glyph === false)\r\n            return false;\r\n        return (this.char === other.char &&\r\n            this.fore.isEqual(other.fore) &&\r\n            this.back.isEqual(other.back));\r\n    };\r\n    return Glyph;\r\n}());\r\n//# sourceMappingURL=glyph.js.map\n\nvar BaseTerminal = /** @class */ (function () {\r\n    function BaseTerminal(config) {\r\n        var _a, _b;\r\n        this.width = config.width;\r\n        this.height = config.height;\r\n        this.foreColor = (_a = config.foreColor) !== null && _a !== void 0 ? _a : Color.White;\r\n        this.backColor = (_b = config.backColor) !== null && _b !== void 0 ? _b : Color.Black;\r\n    }\r\n    BaseTerminal.prototype.size = function () {\r\n        return {\r\n            x: this.width,\r\n            y: this.height,\r\n        };\r\n    };\r\n    BaseTerminal.prototype.clear = function () {\r\n        this.fill({ x: 0, y: 0 }, { x: this.width - 1, y: this.height - 1 }, new Glyph(\" \"));\r\n    };\r\n    BaseTerminal.prototype.fill = function (v1, v2, glyph) {\r\n        for (var x = v1.x; x <= v2.x; x++) {\r\n            for (var y = v1.y; y <= v2.y; y++) {\r\n                this.drawGlyph({ x: x, y: y }, glyph);\r\n            }\r\n        }\r\n    };\r\n    BaseTerminal.prototype.writeAt = function (pos, text, fore, back) {\r\n        if (fore === void 0) { fore = this.foreColor; }\r\n        if (back === void 0) { back = this.backColor; }\r\n        for (var i = 0; i < text.length; i++) {\r\n            if (pos.x + i >= this.width)\r\n                break;\r\n            this.drawGlyph({\r\n                x: pos.x + i,\r\n                y: pos.y,\r\n            }, Glyph.fromCharCode(text.charCodeAt(i), fore, back));\r\n        }\r\n    };\r\n    BaseTerminal.prototype.port = function (pos, width, height) {\r\n        return new PortTerminal(pos, { x: width, y: height }, this);\r\n    };\r\n    BaseTerminal.prototype.drawCharCode = function (pos, charCode, foreColor, backColor) {\r\n        if (foreColor === void 0) { foreColor = this.foreColor; }\r\n        if (backColor === void 0) { backColor = this.backColor; }\r\n        this.drawGlyph(pos, Glyph.fromCharCode(charCode, foreColor, backColor));\r\n    };\r\n    return BaseTerminal;\r\n}());\r\nvar RenderableTerminal = /** @class */ (function (_super) {\r\n    __extends(RenderableTerminal, _super);\r\n    function RenderableTerminal() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return RenderableTerminal;\r\n}(BaseTerminal));\r\nvar PortTerminal = /** @class */ (function (_super) {\r\n    __extends(PortTerminal, _super);\r\n    function PortTerminal(pos, size, root) {\r\n        var _this = _super.call(this, { width: size.x, height: size.y }) || this;\r\n        _this._x = pos.x;\r\n        _this._y = pos.y;\r\n        _this.portSize = size;\r\n        _this.root = root;\r\n        return _this;\r\n    }\r\n    PortTerminal.prototype.drawGlyph = function (pos, glyph) {\r\n        if (pos.x < 0 || pos.x >= this.width)\r\n            return;\r\n        if (pos.y < 0 || pos.y >= this.height)\r\n            return;\r\n        this.root.drawGlyph({ x: this._x + pos.x, y: this._y + pos.y }, glyph);\r\n    };\r\n    PortTerminal.prototype.port = function (pos, width, height) {\r\n        return new PortTerminal({\r\n            x: this._x + pos.x,\r\n            y: this._y + pos.y,\r\n        }, { x: width, y: height }, this.root);\r\n    };\r\n    return PortTerminal;\r\n}(BaseTerminal));\r\n//# sourceMappingURL=terminal.js.map\n\nvar Table = /** @class */ (function () {\r\n    function Table(width, height) {\r\n        this.items = [];\r\n        this.width = width;\r\n        this.height = height;\r\n        // ToDo - Initialize empty array\r\n    }\r\n    Table.prototype.fill = function (value) {\r\n        var size = this.width * this.height;\r\n        for (var i = 0; i < size; i++) {\r\n            this.items[i] = value;\r\n        }\r\n    };\r\n    Table.prototype.get = function (_a) {\r\n        var x = _a.x, y = _a.y;\r\n        if (!this.isInBounds({ x: x, y: y }))\r\n            return undefined;\r\n        var index = y * this.width + x;\r\n        return this.items[index];\r\n    };\r\n    Table.prototype.set = function (pos, item) {\r\n        if (this.isInBounds(pos) === false)\r\n            throw new Error(pos.x + \":\" + pos.y + \" is not in bounds\");\r\n        var index = pos.y * this.width + pos.x;\r\n        if (item !== undefined)\r\n            this.items[index] = item;\r\n        else\r\n            delete this.items[index];\r\n    };\r\n    Table.prototype.isInBounds = function (_a) {\r\n        var x = _a.x, y = _a.y;\r\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    Table.prototype.getNeighbors = function (pos, predicate, topology) {\r\n        var _this = this;\r\n        if (topology === void 0) { topology = \"eight\"; }\r\n        var neighbors = [];\r\n        neighbors.push({ x: pos.x + 1, y: pos.y });\r\n        neighbors.push({ x: pos.x, y: pos.y + -1 });\r\n        neighbors.push({ x: pos.x + -1, y: pos.y });\r\n        neighbors.push({ x: pos.x, y: pos.y + 1 });\r\n        if (topology === \"eight\") {\r\n            neighbors.push({ x: pos.x + 1, y: pos.y - 1 });\r\n            neighbors.push({ x: pos.x + -1, y: pos.y + -1 });\r\n            neighbors.push({ x: pos.x + -1, y: pos.y + 1 });\r\n            neighbors.push({ x: pos.x + 1, y: pos.y + 1 });\r\n        }\r\n        neighbors = neighbors.filter(function (v) { return _this.isInBounds(v); });\r\n        if (predicate) {\r\n            neighbors = neighbors.filter(function (v) { return predicate(v, _this.get(v)); });\r\n        }\r\n        return neighbors;\r\n    };\r\n    Table.prototype.floodFillSelect = function (pos, targetValue) {\r\n        if (!targetValue) {\r\n            targetValue = this.get(pos);\r\n        }\r\n        // If given a target value, must match start position\r\n        if (this.get(pos) !== targetValue) {\r\n            return [];\r\n        }\r\n        var horizon = [pos];\r\n        // \"x:y\", for quick indexing\r\n        var floodFill = new Set();\r\n        while (horizon.length) {\r\n            var point = horizon.shift();\r\n            var value = this.get(point);\r\n            // If not the right type of value, we're done.\r\n            if (value !== targetValue)\r\n                continue;\r\n            // If we've already marked this spot\r\n            if (floodFill.has(point.x + \":\" + point.y))\r\n                continue;\r\n            // If it is the proper value, collect it\r\n            floodFill.add(point.x + \":\" + point.y);\r\n            // The add it's neighbors to the search horizon\r\n            var neighbors = this.getNeighbors(point, undefined, \"four\");\r\n            horizon.push.apply(horizon, neighbors);\r\n        }\r\n        var fill = Array.from(floodFill.keys()).map(function (str) {\r\n            var _a = str.split(\":\"), x = _a[0], y = _a[1];\r\n            return {\r\n                x: Number.parseInt(x),\r\n                y: Number.parseInt(y),\r\n            };\r\n        });\r\n        return fill;\r\n    };\r\n    return Table;\r\n}());\r\n//# sourceMappingURL=table.js.map\n\n/** Represents glyph data, agnostic to how it is rendered. */\r\nvar Display = /** @class */ (function () {\r\n    /**\r\n     * Creates a new Display\r\n     * @param width - The number of glyphs wide the display is\r\n     * @param height - The number of glyphs tall the display is\r\n     */\r\n    function Display(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.glyphs = new Table(width, height);\r\n        this.changedGlyphs = new Table(width, height);\r\n    }\r\n    /**\r\n     * Returns a Vector representing the width/height of the display.\r\n     */\r\n    Display.prototype.size = function () {\r\n        return { x: this.width, y: this.height };\r\n    };\r\n    /**\r\n     * Sets a single glyph in the display.\r\n     *\r\n     * @param pos Vector2 - The position of the Glyph\r\n     * @param glyph Glyph - The Glyph\r\n     */\r\n    Display.prototype.setGlyph = function (pos, glyph) {\r\n        if (this.glyphs.isInBounds(pos) === false)\r\n            return;\r\n        if (glyph.isEqual(this.glyphs.get(pos))) {\r\n            this.changedGlyphs.set(pos, undefined);\r\n        }\r\n        else {\r\n            this.changedGlyphs.set(pos, glyph);\r\n        }\r\n    };\r\n    /**\r\n     * Calls the callback with each x/y/glyph pair.\r\n     * The terminal needs to decide how to render the display.\r\n     * The callback is called bottom to top, right to left.\r\n     */\r\n    Display.prototype.render = function (callback) {\r\n        for (var y = this.height - 1; y >= 0; y--) {\r\n            for (var x = this.width - 1; x >= 0; x--) {\r\n                var glyph = this.changedGlyphs.get({ x: x, y: y });\r\n                if (!glyph)\r\n                    continue;\r\n                callback({ x: x, y: y }, glyph);\r\n                this.glyphs.set({ x: x, y: y }, glyph);\r\n                this.changedGlyphs.set({ x: x, y: y }, undefined);\r\n            }\r\n        }\r\n    };\r\n    return Display;\r\n}());\r\n//# sourceMappingURL=display.js.map\n\nvar Font = /** @class */ (function () {\r\n    function Font(family, size, charWidth, height, x, y) {\r\n        this.family = family;\r\n        this.size = size;\r\n        this.charWidth = charWidth;\r\n        this.lineHeight = height;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    return Font;\r\n}());\r\n/**\r\n * Renders a display by writing fonts to a canvas.\r\n */\r\nvar CanvasTerminal = /** @class */ (function (_super) {\r\n    __extends(CanvasTerminal, _super);\r\n    /**\r\n     * Creates a new CanvasTerminal.\r\n     *\r\n     * @param config - The config for the CanvasTerminal\r\n     * @param config.width - The width of the terminal in characters.\r\n     * @param config.height - The height of the terminal in characters.\r\n     * @param config.font Font - A font object\r\n     * @param config.mountNode - Will mount the canvas as a child of this node if provided.\r\n     */\r\n    function CanvasTerminal(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.scale = window.devicePixelRatio;\r\n        _this.display = new Display(config.width, config.height);\r\n        _this.font = config.font;\r\n        _this.canvas = window.document.createElement(\"canvas\");\r\n        _this.context = _this.canvas.getContext(\"2d\");\r\n        var canvasWidth = _this.font.charWidth * _this.display.width;\r\n        var canvasHeight = _this.font.lineHeight * _this.display.height;\r\n        _this.canvas.width = canvasWidth * _this.scale;\r\n        _this.canvas.height = canvasHeight * _this.scale;\r\n        _this.canvas.style.width = canvasWidth + \"px\";\r\n        _this.canvas.style.height = canvasHeight + \"px\";\r\n        // Mount the canvas\r\n        if (config.mountNode) {\r\n            config.mountNode.appendChild(_this.canvas);\r\n        }\r\n        else {\r\n            window.document.body.appendChild(_this.canvas);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws a glyph on the display.\r\n     *\r\n     * @param pos Vector2 - Position of the Glyph\r\n     * @param glyph Glyph - The Glyph to render\r\n     */\r\n    CanvasTerminal.prototype.drawGlyph = function (pos, glyph) {\r\n        this.display.setGlyph(pos, glyph);\r\n    };\r\n    /**\r\n     * Renders the display to the canvas.\r\n     * Usually drawn once per animation frame.\r\n     */\r\n    CanvasTerminal.prototype.render = function () {\r\n        var _this = this;\r\n        this.context.font = this.font.size * this.scale + \"px \" + this.font.family + \", monospace\";\r\n        this.display.render(function (pos, glyph) {\r\n            // Fill the background\r\n            _this.context.fillStyle = glyph.back.cssColor();\r\n            _this.context.fillRect(pos.x * _this.font.charWidth * _this.scale, pos.y * _this.font.lineHeight * _this.scale, _this.font.charWidth * _this.scale, _this.font.lineHeight * _this.scale);\r\n            // Dont bother drawing empty characters\r\n            if (glyph.char === 0 || \" \".charCodeAt(0) === glyph.char) {\r\n                return;\r\n            }\r\n            // Fill the char\r\n            _this.context.fillStyle = glyph.fore.cssColor();\r\n            _this.context.fillText(String.fromCharCode(glyph.char), (pos.x * _this.font.charWidth + _this.font.x) * _this.scale, (pos.y * _this.font.lineHeight + _this.font.y) * _this.scale);\r\n        });\r\n    };\r\n    /**\r\n     * Returns the character position given a pixel coordinate.\r\n     */\r\n    CanvasTerminal.prototype.pixelToChar = function (pixel) {\r\n        var rect = this.canvas.getBoundingClientRect();\r\n        return {\r\n            x: Math.floor((pixel.x - rect.left) / this.font.charWidth),\r\n            y: Math.floor((pixel.y - rect.top) / this.font.lineHeight),\r\n        };\r\n    };\r\n    /**\r\n     * Deletes the terminal, removing the canvas.\r\n     */\r\n    CanvasTerminal.prototype.delete = function () {\r\n        var _a;\r\n        (_a = this.canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.canvas);\r\n    };\r\n    return CanvasTerminal;\r\n}(RenderableTerminal));\r\n//# sourceMappingURL=canvas-terminal.js.map\n\n/// Unicode code points for various special characters that also exist on\r\n/// [code page 437][font].\r\n///\r\n/// [font]: http://en.wikipedia.org/wiki/Code_page_437\r\nvar CharCode;\r\n(function (CharCode) {\r\n    // 1 - 15.\r\n    CharCode[CharCode[\"whiteSmilingFace\"] = 9786] = \"whiteSmilingFace\";\r\n    CharCode[CharCode[\"blackSmilingFace\"] = 9787] = \"blackSmilingFace\";\r\n    CharCode[CharCode[\"blackHeartSuit\"] = 9829] = \"blackHeartSuit\";\r\n    CharCode[CharCode[\"blackDiamondSuit\"] = 9830] = \"blackDiamondSuit\";\r\n    CharCode[CharCode[\"blackClubSuit\"] = 9827] = \"blackClubSuit\";\r\n    CharCode[CharCode[\"blackSpadeSuit\"] = 9824] = \"blackSpadeSuit\";\r\n    CharCode[CharCode[\"bullet\"] = 8226] = \"bullet\";\r\n    CharCode[CharCode[\"inverseBullet\"] = 9688] = \"inverseBullet\";\r\n    CharCode[CharCode[\"whiteCircle\"] = 9675] = \"whiteCircle\";\r\n    CharCode[CharCode[\"inverseWhiteCircle\"] = 9689] = \"inverseWhiteCircle\";\r\n    CharCode[CharCode[\"maleSign\"] = 9794] = \"maleSign\";\r\n    CharCode[CharCode[\"femaleSign\"] = 9792] = \"femaleSign\";\r\n    CharCode[CharCode[\"eighthNote\"] = 9834] = \"eighthNote\";\r\n    CharCode[CharCode[\"beamedEighthNotes\"] = 9835] = \"beamedEighthNotes\";\r\n    CharCode[CharCode[\"whiteSunWithRays\"] = 9788] = \"whiteSunWithRays\";\r\n    // 16 - 31.\r\n    CharCode[CharCode[\"blackRightPointingPointer\"] = 9658] = \"blackRightPointingPointer\";\r\n    CharCode[CharCode[\"blackLeftPointingPointer\"] = 9668] = \"blackLeftPointingPointer\";\r\n    CharCode[CharCode[\"upDownArrow\"] = 8597] = \"upDownArrow\";\r\n    CharCode[CharCode[\"doubleExclamationMark\"] = 8252] = \"doubleExclamationMark\";\r\n    CharCode[CharCode[\"pilcrow\"] = 182] = \"pilcrow\";\r\n    CharCode[CharCode[\"sectionSign\"] = 167] = \"sectionSign\";\r\n    CharCode[CharCode[\"blackRectangle\"] = 9644] = \"blackRectangle\";\r\n    CharCode[CharCode[\"upDownArrowWithBase\"] = 8616] = \"upDownArrowWithBase\";\r\n    CharCode[CharCode[\"upwardsArrow\"] = 8593] = \"upwardsArrow\";\r\n    CharCode[CharCode[\"downwardsArrow\"] = 8595] = \"downwardsArrow\";\r\n    CharCode[CharCode[\"rightwardsArrow\"] = 8594] = \"rightwardsArrow\";\r\n    CharCode[CharCode[\"leftwardsArrow\"] = 8592] = \"leftwardsArrow\";\r\n    CharCode[CharCode[\"rightAngle\"] = 8735] = \"rightAngle\";\r\n    CharCode[CharCode[\"leftRightArrow\"] = 8596] = \"leftRightArrow\";\r\n    CharCode[CharCode[\"blackUpPointingTriangle\"] = 9650] = \"blackUpPointingTriangle\";\r\n    CharCode[CharCode[\"blackDownPointingTriangle\"] = 9660] = \"blackDownPointingTriangle\";\r\n    // 32 - 47.\r\n    CharCode[CharCode[\"space\"] = 32] = \"space\";\r\n    CharCode[CharCode[\"exclamationPoint\"] = 33] = \"exclamationPoint\";\r\n    CharCode[CharCode[\"doubleQuote\"] = 34] = \"doubleQuote\";\r\n    CharCode[CharCode[\"numberSign\"] = 35] = \"numberSign\";\r\n    CharCode[CharCode[\"dollarSign\"] = 36] = \"dollarSign\";\r\n    CharCode[CharCode[\"percent\"] = 37] = \"percent\";\r\n    CharCode[CharCode[\"ampersand\"] = 38] = \"ampersand\";\r\n    CharCode[CharCode[\"apostrophe\"] = 39] = \"apostrophe\";\r\n    CharCode[CharCode[\"leftParenthesis\"] = 40] = \"leftParenthesis\";\r\n    CharCode[CharCode[\"rightParenthesis\"] = 41] = \"rightParenthesis\";\r\n    CharCode[CharCode[\"asterisk\"] = 42] = \"asterisk\";\r\n    CharCode[CharCode[\"plus\"] = 43] = \"plus\";\r\n    CharCode[CharCode[\"comma\"] = 44] = \"comma\";\r\n    CharCode[CharCode[\"minus\"] = 45] = \"minus\";\r\n    CharCode[CharCode[\"period\"] = 46] = \"period\";\r\n    CharCode[CharCode[\"slash\"] = 47] = \"slash\";\r\n    // 48 - 63.\r\n    CharCode[CharCode[\"zero\"] = 48] = \"zero\";\r\n    CharCode[CharCode[\"one\"] = 49] = \"one\";\r\n    CharCode[CharCode[\"two\"] = 50] = \"two\";\r\n    CharCode[CharCode[\"three\"] = 51] = \"three\";\r\n    CharCode[CharCode[\"four\"] = 52] = \"four\";\r\n    CharCode[CharCode[\"five\"] = 53] = \"five\";\r\n    CharCode[CharCode[\"six\"] = 54] = \"six\";\r\n    CharCode[CharCode[\"seven\"] = 55] = \"seven\";\r\n    CharCode[CharCode[\"eight\"] = 56] = \"eight\";\r\n    CharCode[CharCode[\"nine\"] = 57] = \"nine\";\r\n    CharCode[CharCode[\"colon\"] = 58] = \"colon\";\r\n    CharCode[CharCode[\"semicolon\"] = 59] = \"semicolon\";\r\n    CharCode[CharCode[\"lessThan\"] = 60] = \"lessThan\";\r\n    CharCode[CharCode[\"equals\"] = 61] = \"equals\";\r\n    CharCode[CharCode[\"greaterThan\"] = 62] = \"greaterThan\";\r\n    CharCode[CharCode[\"questionMark\"] = 63] = \"questionMark\";\r\n    // 64 - 95.\r\n    CharCode[CharCode[\"at\"] = 64] = \"at\";\r\n    CharCode[CharCode[\"aUpper\"] = 65] = \"aUpper\";\r\n    CharCode[CharCode[\"bUpper\"] = 66] = \"bUpper\";\r\n    CharCode[CharCode[\"cUpper\"] = 67] = \"cUpper\";\r\n    CharCode[CharCode[\"dUpper\"] = 68] = \"dUpper\";\r\n    CharCode[CharCode[\"eUpper\"] = 69] = \"eUpper\";\r\n    CharCode[CharCode[\"fUpper\"] = 70] = \"fUpper\";\r\n    CharCode[CharCode[\"gUpper\"] = 71] = \"gUpper\";\r\n    CharCode[CharCode[\"hUpper\"] = 72] = \"hUpper\";\r\n    CharCode[CharCode[\"iUpper\"] = 73] = \"iUpper\";\r\n    CharCode[CharCode[\"jUpper\"] = 74] = \"jUpper\";\r\n    CharCode[CharCode[\"kUpper\"] = 75] = \"kUpper\";\r\n    CharCode[CharCode[\"lUpper\"] = 76] = \"lUpper\";\r\n    CharCode[CharCode[\"mUpper\"] = 77] = \"mUpper\";\r\n    CharCode[CharCode[\"nUpper\"] = 78] = \"nUpper\";\r\n    CharCode[CharCode[\"oUpper\"] = 79] = \"oUpper\";\r\n    CharCode[CharCode[\"pUpper\"] = 80] = \"pUpper\";\r\n    CharCode[CharCode[\"qUpper\"] = 81] = \"qUpper\";\r\n    CharCode[CharCode[\"rUpper\"] = 82] = \"rUpper\";\r\n    CharCode[CharCode[\"sUpper\"] = 83] = \"sUpper\";\r\n    CharCode[CharCode[\"tUpper\"] = 84] = \"tUpper\";\r\n    CharCode[CharCode[\"uUpper\"] = 85] = \"uUpper\";\r\n    CharCode[CharCode[\"vUpper\"] = 86] = \"vUpper\";\r\n    CharCode[CharCode[\"wUpper\"] = 87] = \"wUpper\";\r\n    CharCode[CharCode[\"xUpper\"] = 88] = \"xUpper\";\r\n    CharCode[CharCode[\"yUpper\"] = 89] = \"yUpper\";\r\n    CharCode[CharCode[\"zUpper\"] = 90] = \"zUpper\";\r\n    CharCode[CharCode[\"leftBracket\"] = 91] = \"leftBracket\";\r\n    CharCode[CharCode[\"backSlash\"] = 92] = \"backSlash\";\r\n    CharCode[CharCode[\"rightBracket\"] = 93] = \"rightBracket\";\r\n    CharCode[CharCode[\"caret\"] = 94] = \"caret\";\r\n    CharCode[CharCode[\"underscore\"] = 95] = \"underscore\";\r\n    // 96 - 127.\r\n    CharCode[CharCode[\"accent\"] = 96] = \"accent\";\r\n    CharCode[CharCode[\"aLower\"] = 97] = \"aLower\";\r\n    CharCode[CharCode[\"bLower\"] = 98] = \"bLower\";\r\n    CharCode[CharCode[\"cLower\"] = 99] = \"cLower\";\r\n    CharCode[CharCode[\"dLower\"] = 100] = \"dLower\";\r\n    CharCode[CharCode[\"eLower\"] = 101] = \"eLower\";\r\n    CharCode[CharCode[\"fLower\"] = 102] = \"fLower\";\r\n    CharCode[CharCode[\"gLower\"] = 103] = \"gLower\";\r\n    CharCode[CharCode[\"hLower\"] = 104] = \"hLower\";\r\n    CharCode[CharCode[\"iLower\"] = 105] = \"iLower\";\r\n    CharCode[CharCode[\"jLower\"] = 106] = \"jLower\";\r\n    CharCode[CharCode[\"kLower\"] = 107] = \"kLower\";\r\n    CharCode[CharCode[\"lLower\"] = 108] = \"lLower\";\r\n    CharCode[CharCode[\"mLower\"] = 109] = \"mLower\";\r\n    CharCode[CharCode[\"nLower\"] = 110] = \"nLower\";\r\n    CharCode[CharCode[\"oLower\"] = 111] = \"oLower\";\r\n    CharCode[CharCode[\"pLower\"] = 112] = \"pLower\";\r\n    CharCode[CharCode[\"qLower\"] = 113] = \"qLower\";\r\n    CharCode[CharCode[\"rLower\"] = 114] = \"rLower\";\r\n    CharCode[CharCode[\"sLower\"] = 115] = \"sLower\";\r\n    CharCode[CharCode[\"tLower\"] = 116] = \"tLower\";\r\n    CharCode[CharCode[\"uLower\"] = 117] = \"uLower\";\r\n    CharCode[CharCode[\"vLower\"] = 118] = \"vLower\";\r\n    CharCode[CharCode[\"wLower\"] = 119] = \"wLower\";\r\n    CharCode[CharCode[\"xLower\"] = 120] = \"xLower\";\r\n    CharCode[CharCode[\"yLower\"] = 121] = \"yLower\";\r\n    CharCode[CharCode[\"zLower\"] = 122] = \"zLower\";\r\n    CharCode[CharCode[\"leftBrace\"] = 123] = \"leftBrace\";\r\n    CharCode[CharCode[\"pipe\"] = 124] = \"pipe\";\r\n    CharCode[CharCode[\"rightBrace\"] = 125] = \"rightBrace\";\r\n    CharCode[CharCode[\"tilde\"] = 126] = \"tilde\";\r\n    CharCode[CharCode[\"house\"] = 8962] = \"house\";\r\n    // 128 - 143.\r\n    CharCode[CharCode[\"latinCapitalLetterCWithCedilla\"] = 199] = \"latinCapitalLetterCWithCedilla\";\r\n    CharCode[CharCode[\"latinSmallLetterUWithDiaeresis\"] = 252] = \"latinSmallLetterUWithDiaeresis\";\r\n    CharCode[CharCode[\"latinSmallLetterEWithAcute\"] = 233] = \"latinSmallLetterEWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterAWithCircumflex\"] = 226] = \"latinSmallLetterAWithCircumflex\";\r\n    CharCode[CharCode[\"latinSmallLetterAWithDiaeresis\"] = 228] = \"latinSmallLetterAWithDiaeresis\";\r\n    CharCode[CharCode[\"latinSmallLetterAWithGrave\"] = 224] = \"latinSmallLetterAWithGrave\";\r\n    CharCode[CharCode[\"latinSmallLetterAWithRingAbove\"] = 229] = \"latinSmallLetterAWithRingAbove\";\r\n    CharCode[CharCode[\"latinSmallLetterCWithCedilla\"] = 231] = \"latinSmallLetterCWithCedilla\";\r\n    CharCode[CharCode[\"latinSmallLetterEWithCircumflex\"] = 234] = \"latinSmallLetterEWithCircumflex\";\r\n    CharCode[CharCode[\"latinSmallLetterEWithDiaeresis\"] = 235] = \"latinSmallLetterEWithDiaeresis\";\r\n    CharCode[CharCode[\"latinSmallLetterEWithGrave\"] = 232] = \"latinSmallLetterEWithGrave\";\r\n    CharCode[CharCode[\"latinSmallLetterIWithDiaeresis\"] = 239] = \"latinSmallLetterIWithDiaeresis\";\r\n    CharCode[CharCode[\"latinSmallLetterIWithCircumflex\"] = 238] = \"latinSmallLetterIWithCircumflex\";\r\n    CharCode[CharCode[\"latinSmallLetterIWithGrave\"] = 236] = \"latinSmallLetterIWithGrave\";\r\n    CharCode[CharCode[\"latinCapitalLetterAWithDiaeresis\"] = 196] = \"latinCapitalLetterAWithDiaeresis\";\r\n    CharCode[CharCode[\"latinCapitalLetterAWithRingAbove\"] = 197] = \"latinCapitalLetterAWithRingAbove\";\r\n    // 144 - 159.\r\n    CharCode[CharCode[\"latinCapitalLetterEWithAcute\"] = 201] = \"latinCapitalLetterEWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterAe\"] = 230] = \"latinSmallLetterAe\";\r\n    CharCode[CharCode[\"latinCapitalLetterAe\"] = 198] = \"latinCapitalLetterAe\";\r\n    CharCode[CharCode[\"latinSmallLetterOWithCircumflex\"] = 244] = \"latinSmallLetterOWithCircumflex\";\r\n    CharCode[CharCode[\"latinSmallLetterOWithDiaeresis\"] = 246] = \"latinSmallLetterOWithDiaeresis\";\r\n    CharCode[CharCode[\"latinSmallLetterOWithGrave\"] = 242] = \"latinSmallLetterOWithGrave\";\r\n    CharCode[CharCode[\"latinSmallLetterUWithCircumflex\"] = 251] = \"latinSmallLetterUWithCircumflex\";\r\n    CharCode[CharCode[\"latinSmallLetterUWithGrave\"] = 249] = \"latinSmallLetterUWithGrave\";\r\n    CharCode[CharCode[\"latinSmallLetterYWithDiaeresis\"] = 255] = \"latinSmallLetterYWithDiaeresis\";\r\n    CharCode[CharCode[\"latinCapitalLetterOWithDiaeresis\"] = 214] = \"latinCapitalLetterOWithDiaeresis\";\r\n    CharCode[CharCode[\"latinCapitalLetterUWithDiaeresis\"] = 220] = \"latinCapitalLetterUWithDiaeresis\";\r\n    CharCode[CharCode[\"centSign\"] = 162] = \"centSign\";\r\n    CharCode[CharCode[\"poundSign\"] = 163] = \"poundSign\";\r\n    CharCode[CharCode[\"yenSign\"] = 165] = \"yenSign\";\r\n    CharCode[CharCode[\"pesetaSign\"] = 8359] = \"pesetaSign\";\r\n    CharCode[CharCode[\"latinSmallLetterFWithHook\"] = 402] = \"latinSmallLetterFWithHook\";\r\n    // 160 - 175.\r\n    CharCode[CharCode[\"latinSmallLetterAWithAcute\"] = 225] = \"latinSmallLetterAWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterIWithAcute\"] = 237] = \"latinSmallLetterIWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterOWithAcute\"] = 243] = \"latinSmallLetterOWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterUWithAcute\"] = 250] = \"latinSmallLetterUWithAcute\";\r\n    CharCode[CharCode[\"latinSmallLetterNWithTilde\"] = 241] = \"latinSmallLetterNWithTilde\";\r\n    CharCode[CharCode[\"latinCapitalLetterNWithTilde\"] = 209] = \"latinCapitalLetterNWithTilde\";\r\n    CharCode[CharCode[\"feminineOrdinalIndicator\"] = 170] = \"feminineOrdinalIndicator\";\r\n    CharCode[CharCode[\"masculineOrdinalIndicator\"] = 186] = \"masculineOrdinalIndicator\";\r\n    CharCode[CharCode[\"invertedQuestionMark\"] = 191] = \"invertedQuestionMark\";\r\n    CharCode[CharCode[\"reversedNotSign\"] = 8976] = \"reversedNotSign\";\r\n    CharCode[CharCode[\"notSign\"] = 172] = \"notSign\";\r\n    CharCode[CharCode[\"vulgarFractionOneHalf\"] = 189] = \"vulgarFractionOneHalf\";\r\n    CharCode[CharCode[\"vulgarFractionOneQuarter\"] = 188] = \"vulgarFractionOneQuarter\";\r\n    CharCode[CharCode[\"invertedExclamationMark\"] = 161] = \"invertedExclamationMark\";\r\n    CharCode[CharCode[\"leftPointingDoubleAngleQuotationMark\"] = 171] = \"leftPointingDoubleAngleQuotationMark\";\r\n    CharCode[CharCode[\"rightPointingDoubleAngleQuotationMark\"] = 187] = \"rightPointingDoubleAngleQuotationMark\";\r\n    // 176 - 191.\r\n    CharCode[CharCode[\"lightShade\"] = 9617] = \"lightShade\";\r\n    CharCode[CharCode[\"mediumShade\"] = 9618] = \"mediumShade\";\r\n    CharCode[CharCode[\"darkShade\"] = 9619] = \"darkShade\";\r\n    CharCode[CharCode[\"boxDrawingsLightVertical\"] = 9474] = \"boxDrawingsLightVertical\";\r\n    CharCode[CharCode[\"boxDrawingsLightVerticalAndLeft\"] = 9508] = \"boxDrawingsLightVerticalAndLeft\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalSingleAndLeftDouble\"] = 9569] = \"boxDrawingsVerticalSingleAndLeftDouble\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalDoubleAndLeftSingle\"] = 9570] = \"boxDrawingsVerticalDoubleAndLeftSingle\";\r\n    CharCode[CharCode[\"boxDrawingsDownDoubleAndLeftSingle\"] = 9558] = \"boxDrawingsDownDoubleAndLeftSingle\";\r\n    CharCode[CharCode[\"boxDrawingsDownSingleAndLeftDouble\"] = 9557] = \"boxDrawingsDownSingleAndLeftDouble\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleVerticalAndLeft\"] = 9571] = \"boxDrawingsDoubleVerticalAndLeft\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleVertical\"] = 9553] = \"boxDrawingsDoubleVertical\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleDownAndLeft\"] = 9559] = \"boxDrawingsDoubleDownAndLeft\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleUpAndLeft\"] = 9565] = \"boxDrawingsDoubleUpAndLeft\";\r\n    CharCode[CharCode[\"boxDrawingsUpDoubleAndLeftSingle\"] = 9564] = \"boxDrawingsUpDoubleAndLeftSingle\";\r\n    CharCode[CharCode[\"boxDrawingsUpSingleAndLeftDouble\"] = 9563] = \"boxDrawingsUpSingleAndLeftDouble\";\r\n    CharCode[CharCode[\"boxDrawingsLightDownAndLeft\"] = 9488] = \"boxDrawingsLightDownAndLeft\";\r\n    // 192 - 207.\r\n    CharCode[CharCode[\"boxDrawingsLightUpAndRight\"] = 9492] = \"boxDrawingsLightUpAndRight\";\r\n    CharCode[CharCode[\"boxDrawingsLightUpAndHorizontal\"] = 9524] = \"boxDrawingsLightUpAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsLightDownAndHorizontal\"] = 9516] = \"boxDrawingsLightDownAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsLightVerticalAndRight\"] = 9500] = \"boxDrawingsLightVerticalAndRight\";\r\n    CharCode[CharCode[\"boxDrawingsLightHorizontal\"] = 9472] = \"boxDrawingsLightHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsLightVerticalAndHorizontal\"] = 9532] = \"boxDrawingsLightVerticalAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalSingleAndRightDouble\"] = 9566] = \"boxDrawingsVerticalSingleAndRightDouble\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalDoubleAndRightSingle\"] = 9567] = \"boxDrawingsVerticalDoubleAndRightSingle\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleUpAndRight\"] = 9562] = \"boxDrawingsDoubleUpAndRight\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleDownAndRight\"] = 9556] = \"boxDrawingsDoubleDownAndRight\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleUpAndHorizontal\"] = 9577] = \"boxDrawingsDoubleUpAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleDownAndHorizontal\"] = 9574] = \"boxDrawingsDoubleDownAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleVerticalAndRight\"] = 9568] = \"boxDrawingsDoubleVerticalAndRight\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleHorizontal\"] = 9552] = \"boxDrawingsDoubleHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsDoubleVerticalAndHorizontal\"] = 9580] = \"boxDrawingsDoubleVerticalAndHorizontal\";\r\n    CharCode[CharCode[\"boxDrawingsUpSingleAndHorizontalDouble\"] = 9575] = \"boxDrawingsUpSingleAndHorizontalDouble\";\r\n    // 208 - 223.\r\n    CharCode[CharCode[\"boxDrawingsUpDoubleAndHorizontalSingle\"] = 9576] = \"boxDrawingsUpDoubleAndHorizontalSingle\";\r\n    CharCode[CharCode[\"boxDrawingsDownSingleAndHorizontalDouble\"] = 9572] = \"boxDrawingsDownSingleAndHorizontalDouble\";\r\n    CharCode[CharCode[\"boxDrawingsDownDoubleAndHorizontalSingle\"] = 9573] = \"boxDrawingsDownDoubleAndHorizontalSingle\";\r\n    CharCode[CharCode[\"boxDrawingsUpDoubleAndRightSingle\"] = 9561] = \"boxDrawingsUpDoubleAndRightSingle\";\r\n    CharCode[CharCode[\"boxDrawingsUpSingleAndRightDouble\"] = 9560] = \"boxDrawingsUpSingleAndRightDouble\";\r\n    CharCode[CharCode[\"boxDrawingsDownSingleAndRightDouble\"] = 9554] = \"boxDrawingsDownSingleAndRightDouble\";\r\n    CharCode[CharCode[\"boxDrawingsDownDoubleAndRightSingle\"] = 9555] = \"boxDrawingsDownDoubleAndRightSingle\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalDoubleAndHorizontalSingle\"] = 9579] = \"boxDrawingsVerticalDoubleAndHorizontalSingle\";\r\n    CharCode[CharCode[\"boxDrawingsVerticalSingleAndHorizontalDouble\"] = 9578] = \"boxDrawingsVerticalSingleAndHorizontalDouble\";\r\n    CharCode[CharCode[\"boxDrawingsLightUpAndLeft\"] = 9496] = \"boxDrawingsLightUpAndLeft\";\r\n    CharCode[CharCode[\"boxDrawingsLightDownAndRight\"] = 9484] = \"boxDrawingsLightDownAndRight\";\r\n    CharCode[CharCode[\"fullBlock\"] = 9608] = \"fullBlock\";\r\n    CharCode[CharCode[\"lowerHalfBlock\"] = 9604] = \"lowerHalfBlock\";\r\n    CharCode[CharCode[\"leftHalfBlock\"] = 9612] = \"leftHalfBlock\";\r\n    CharCode[CharCode[\"rightHalfBlock\"] = 9616] = \"rightHalfBlock\";\r\n    CharCode[CharCode[\"upperHalfBlock\"] = 9600] = \"upperHalfBlock\";\r\n    // 224 - 239.\r\n    CharCode[CharCode[\"greekSmallLetterAlpha\"] = 945] = \"greekSmallLetterAlpha\";\r\n    CharCode[CharCode[\"latinSmallLetterSharpS\"] = 223] = \"latinSmallLetterSharpS\";\r\n    CharCode[CharCode[\"greekCapitalLetterGamma\"] = 915] = \"greekCapitalLetterGamma\";\r\n    CharCode[CharCode[\"greekSmallLetterPi\"] = 960] = \"greekSmallLetterPi\";\r\n    CharCode[CharCode[\"greekCapitalLetterSigma\"] = 931] = \"greekCapitalLetterSigma\";\r\n    CharCode[CharCode[\"greekSmallLetterSigma\"] = 963] = \"greekSmallLetterSigma\";\r\n    CharCode[CharCode[\"microSign\"] = 181] = \"microSign\";\r\n    CharCode[CharCode[\"greekSmallLetterTau\"] = 964] = \"greekSmallLetterTau\";\r\n    CharCode[CharCode[\"greekCapitalLetterPhi\"] = 934] = \"greekCapitalLetterPhi\";\r\n    CharCode[CharCode[\"greekCapitalLetterTheta\"] = 920] = \"greekCapitalLetterTheta\";\r\n    CharCode[CharCode[\"greekCapitalLetterOmega\"] = 937] = \"greekCapitalLetterOmega\";\r\n    CharCode[CharCode[\"greekSmallLetterDelta\"] = 948] = \"greekSmallLetterDelta\";\r\n    CharCode[CharCode[\"infinity\"] = 8734] = \"infinity\";\r\n    CharCode[CharCode[\"greekSmallLetterPhi\"] = 966] = \"greekSmallLetterPhi\";\r\n    CharCode[CharCode[\"greekSmallLetterEpsilon\"] = 949] = \"greekSmallLetterEpsilon\";\r\n    CharCode[CharCode[\"intersection\"] = 8745] = \"intersection\";\r\n    // 240 - 254.\r\n    CharCode[CharCode[\"identicalTo\"] = 8801] = \"identicalTo\";\r\n    CharCode[CharCode[\"plusMinusSign\"] = 177] = \"plusMinusSign\";\r\n    CharCode[CharCode[\"greaterThanOrEqualTo\"] = 8805] = \"greaterThanOrEqualTo\";\r\n    CharCode[CharCode[\"lessThanOrEqualTo\"] = 8804] = \"lessThanOrEqualTo\";\r\n    CharCode[CharCode[\"topHalfIntegral\"] = 8992] = \"topHalfIntegral\";\r\n    CharCode[CharCode[\"bottomHalfIntegral\"] = 8993] = \"bottomHalfIntegral\";\r\n    CharCode[CharCode[\"divisionSign\"] = 247] = \"divisionSign\";\r\n    CharCode[CharCode[\"almostEqualTo\"] = 8776] = \"almostEqualTo\";\r\n    CharCode[CharCode[\"degreeSign\"] = 176] = \"degreeSign\";\r\n    CharCode[CharCode[\"bulletOperator\"] = 8729] = \"bulletOperator\";\r\n    CharCode[CharCode[\"middleDot\"] = 183] = \"middleDot\";\r\n    CharCode[CharCode[\"squareRoot\"] = 8730] = \"squareRoot\";\r\n    CharCode[CharCode[\"superscriptLatinSmallLetterN\"] = 8319] = \"superscriptLatinSmallLetterN\";\r\n    CharCode[CharCode[\"superscriptTwo\"] = 178] = \"superscriptTwo\";\r\n    CharCode[CharCode[\"blackSquare\"] = 9632] = \"blackSquare\";\r\n})(CharCode || (CharCode = {}));\r\n//# sourceMappingURL=char-code.js.map\n\nvar _a;\r\nvar unicodeMap = (_a = {},\r\n    // 1 - 15.\r\n    _a[CharCode.whiteSmilingFace] = 1,\r\n    _a[CharCode.blackSmilingFace] = 2,\r\n    _a[CharCode.blackHeartSuit] = 3,\r\n    _a[CharCode.blackDiamondSuit] = 4,\r\n    _a[CharCode.blackClubSuit] = 5,\r\n    _a[CharCode.blackSpadeSuit] = 6,\r\n    _a[CharCode.bullet] = 7,\r\n    _a[CharCode.inverseBullet] = 8,\r\n    _a[CharCode.whiteCircle] = 9,\r\n    _a[CharCode.inverseWhiteCircle] = 10,\r\n    _a[CharCode.maleSign] = 11,\r\n    _a[CharCode.femaleSign] = 12,\r\n    _a[CharCode.eighthNote] = 13,\r\n    _a[CharCode.beamedEighthNotes] = 14,\r\n    _a[CharCode.whiteSunWithRays] = 15,\r\n    // 16 - 31.\r\n    _a[CharCode.blackRightPointingPointer] = 16,\r\n    _a[CharCode.blackLeftPointingPointer] = 17,\r\n    _a[CharCode.upDownArrow] = 18,\r\n    _a[CharCode.doubleExclamationMark] = 19,\r\n    _a[CharCode.pilcrow] = 20,\r\n    _a[CharCode.sectionSign] = 21,\r\n    _a[CharCode.blackRectangle] = 22,\r\n    _a[CharCode.upDownArrowWithBase] = 23,\r\n    _a[CharCode.upwardsArrow] = 24,\r\n    _a[CharCode.downwardsArrow] = 25,\r\n    _a[CharCode.rightwardsArrow] = 26,\r\n    _a[CharCode.leftwardsArrow] = 27,\r\n    _a[CharCode.rightAngle] = 28,\r\n    _a[CharCode.leftRightArrow] = 29,\r\n    _a[CharCode.blackUpPointingTriangle] = 30,\r\n    _a[CharCode.blackDownPointingTriangle] = 31,\r\n    // 127.\r\n    _a[CharCode.house] = 127,\r\n    // 128 - 143.\r\n    _a[CharCode.latinCapitalLetterCWithCedilla] = 128,\r\n    _a[CharCode.latinSmallLetterUWithDiaeresis] = 129,\r\n    _a[CharCode.latinSmallLetterEWithAcute] = 130,\r\n    _a[CharCode.latinSmallLetterAWithCircumflex] = 131,\r\n    _a[CharCode.latinSmallLetterAWithDiaeresis] = 132,\r\n    _a[CharCode.latinSmallLetterAWithGrave] = 133,\r\n    _a[CharCode.latinSmallLetterAWithRingAbove] = 134,\r\n    _a[CharCode.latinSmallLetterCWithCedilla] = 135,\r\n    _a[CharCode.latinSmallLetterEWithCircumflex] = 136,\r\n    _a[CharCode.latinSmallLetterEWithDiaeresis] = 137,\r\n    _a[CharCode.latinSmallLetterEWithGrave] = 138,\r\n    _a[CharCode.latinSmallLetterIWithDiaeresis] = 139,\r\n    _a[CharCode.latinSmallLetterIWithCircumflex] = 140,\r\n    _a[CharCode.latinSmallLetterIWithGrave] = 141,\r\n    _a[CharCode.latinCapitalLetterAWithDiaeresis] = 142,\r\n    _a[CharCode.latinCapitalLetterAWithRingAbove] = 143,\r\n    // 144 - 159.\r\n    _a[CharCode.latinCapitalLetterEWithAcute] = 144,\r\n    _a[CharCode.latinSmallLetterAe] = 145,\r\n    _a[CharCode.latinCapitalLetterAe] = 146,\r\n    _a[CharCode.latinSmallLetterOWithCircumflex] = 147,\r\n    _a[CharCode.latinSmallLetterOWithDiaeresis] = 148,\r\n    _a[CharCode.latinSmallLetterOWithGrave] = 149,\r\n    _a[CharCode.latinSmallLetterUWithCircumflex] = 150,\r\n    _a[CharCode.latinSmallLetterUWithGrave] = 151,\r\n    _a[CharCode.latinSmallLetterYWithDiaeresis] = 152,\r\n    _a[CharCode.latinCapitalLetterOWithDiaeresis] = 153,\r\n    _a[CharCode.latinCapitalLetterUWithDiaeresis] = 154,\r\n    _a[CharCode.centSign] = 155,\r\n    _a[CharCode.poundSign] = 156,\r\n    _a[CharCode.yenSign] = 157,\r\n    _a[CharCode.pesetaSign] = 158,\r\n    _a[CharCode.latinSmallLetterFWithHook] = 159,\r\n    // 160 - 175.\r\n    _a[CharCode.latinSmallLetterAWithAcute] = 160,\r\n    _a[CharCode.latinSmallLetterIWithAcute] = 161,\r\n    _a[CharCode.latinSmallLetterOWithAcute] = 162,\r\n    _a[CharCode.latinSmallLetterUWithAcute] = 163,\r\n    _a[CharCode.latinSmallLetterNWithTilde] = 164,\r\n    _a[CharCode.latinCapitalLetterNWithTilde] = 165,\r\n    _a[CharCode.feminineOrdinalIndicator] = 166,\r\n    _a[CharCode.masculineOrdinalIndicator] = 167,\r\n    _a[CharCode.invertedQuestionMark] = 168,\r\n    _a[CharCode.reversedNotSign] = 169,\r\n    _a[CharCode.notSign] = 170,\r\n    _a[CharCode.vulgarFractionOneHalf] = 171,\r\n    _a[CharCode.vulgarFractionOneQuarter] = 172,\r\n    _a[CharCode.invertedExclamationMark] = 173,\r\n    _a[CharCode.leftPointingDoubleAngleQuotationMark] = 174,\r\n    _a[CharCode.rightPointingDoubleAngleQuotationMark] = 175,\r\n    // 176 - 191.\r\n    _a[CharCode.lightShade] = 176,\r\n    _a[CharCode.mediumShade] = 177,\r\n    _a[CharCode.darkShade] = 178,\r\n    _a[CharCode.boxDrawingsLightVertical] = 179,\r\n    _a[CharCode.boxDrawingsLightVerticalAndLeft] = 180,\r\n    _a[CharCode.boxDrawingsVerticalSingleAndLeftDouble] = 181,\r\n    _a[CharCode.boxDrawingsVerticalDoubleAndLeftSingle] = 182,\r\n    _a[CharCode.boxDrawingsDownDoubleAndLeftSingle] = 183,\r\n    _a[CharCode.boxDrawingsDownSingleAndLeftDouble] = 184,\r\n    _a[CharCode.boxDrawingsDoubleVerticalAndLeft] = 185,\r\n    _a[CharCode.boxDrawingsDoubleVertical] = 186,\r\n    _a[CharCode.boxDrawingsDoubleDownAndLeft] = 187,\r\n    _a[CharCode.boxDrawingsDoubleUpAndLeft] = 188,\r\n    _a[CharCode.boxDrawingsUpDoubleAndLeftSingle] = 189,\r\n    _a[CharCode.boxDrawingsUpSingleAndLeftDouble] = 190,\r\n    _a[CharCode.boxDrawingsLightDownAndLeft] = 191,\r\n    // 192 - 207.\r\n    _a[CharCode.boxDrawingsLightUpAndRight] = 192,\r\n    _a[CharCode.boxDrawingsLightUpAndHorizontal] = 193,\r\n    _a[CharCode.boxDrawingsLightDownAndHorizontal] = 194,\r\n    _a[CharCode.boxDrawingsLightVerticalAndRight] = 195,\r\n    _a[CharCode.boxDrawingsLightHorizontal] = 196,\r\n    _a[CharCode.boxDrawingsLightVerticalAndHorizontal] = 197,\r\n    _a[CharCode.boxDrawingsVerticalSingleAndRightDouble] = 198,\r\n    _a[CharCode.boxDrawingsVerticalDoubleAndRightSingle] = 199,\r\n    _a[CharCode.boxDrawingsDoubleUpAndRight] = 200,\r\n    _a[CharCode.boxDrawingsDoubleDownAndRight] = 201,\r\n    _a[CharCode.boxDrawingsDoubleUpAndHorizontal] = 202,\r\n    _a[CharCode.boxDrawingsDoubleDownAndHorizontal] = 203,\r\n    _a[CharCode.boxDrawingsDoubleVerticalAndRight] = 204,\r\n    _a[CharCode.boxDrawingsDoubleHorizontal] = 205,\r\n    _a[CharCode.boxDrawingsDoubleVerticalAndHorizontal] = 206,\r\n    _a[CharCode.boxDrawingsUpSingleAndHorizontalDouble] = 207,\r\n    // 208 - 223.\r\n    _a[CharCode.boxDrawingsUpDoubleAndHorizontalSingle] = 208,\r\n    _a[CharCode.boxDrawingsDownSingleAndHorizontalDouble] = 209,\r\n    _a[CharCode.boxDrawingsDownDoubleAndHorizontalSingle] = 210,\r\n    _a[CharCode.boxDrawingsUpDoubleAndRightSingle] = 211,\r\n    _a[CharCode.boxDrawingsUpSingleAndRightDouble] = 212,\r\n    _a[CharCode.boxDrawingsDownSingleAndRightDouble] = 213,\r\n    _a[CharCode.boxDrawingsDownDoubleAndRightSingle] = 214,\r\n    _a[CharCode.boxDrawingsVerticalDoubleAndHorizontalSingle] = 215,\r\n    _a[CharCode.boxDrawingsVerticalSingleAndHorizontalDouble] = 216,\r\n    _a[CharCode.boxDrawingsLightUpAndLeft] = 217,\r\n    _a[CharCode.boxDrawingsLightDownAndRight] = 218,\r\n    _a[CharCode.fullBlock] = 219,\r\n    _a[CharCode.lowerHalfBlock] = 220,\r\n    _a[CharCode.leftHalfBlock] = 221,\r\n    _a[CharCode.rightHalfBlock] = 222,\r\n    _a[CharCode.upperHalfBlock] = 223,\r\n    // 224 - 239.\r\n    _a[CharCode.greekSmallLetterAlpha] = 224,\r\n    _a[CharCode.latinSmallLetterSharpS] = 225,\r\n    _a[CharCode.greekCapitalLetterGamma] = 226,\r\n    _a[CharCode.greekSmallLetterPi] = 227,\r\n    _a[CharCode.greekCapitalLetterSigma] = 228,\r\n    _a[CharCode.greekSmallLetterSigma] = 229,\r\n    _a[CharCode.microSign] = 230,\r\n    _a[CharCode.greekSmallLetterTau] = 231,\r\n    _a[CharCode.greekCapitalLetterPhi] = 232,\r\n    _a[CharCode.greekCapitalLetterTheta] = 233,\r\n    _a[CharCode.greekCapitalLetterOmega] = 234,\r\n    _a[CharCode.greekSmallLetterDelta] = 235,\r\n    _a[CharCode.infinity] = 236,\r\n    _a[CharCode.greekSmallLetterPhi] = 237,\r\n    _a[CharCode.greekSmallLetterEpsilon] = 238,\r\n    _a[CharCode.intersection] = 239,\r\n    // 240 - 255.\r\n    _a[CharCode.identicalTo] = 240,\r\n    _a[CharCode.plusMinusSign] = 241,\r\n    _a[CharCode.greaterThanOrEqualTo] = 242,\r\n    _a[CharCode.lessThanOrEqualTo] = 243,\r\n    _a[CharCode.topHalfIntegral] = 244,\r\n    _a[CharCode.bottomHalfIntegral] = 245,\r\n    _a[CharCode.divisionSign] = 246,\r\n    _a[CharCode.almostEqualTo] = 247,\r\n    _a[CharCode.degreeSign] = 248,\r\n    _a[CharCode.bulletOperator] = 249,\r\n    _a[CharCode.middleDot] = 250,\r\n    _a[CharCode.squareRoot] = 251,\r\n    _a[CharCode.superscriptLatinSmallLetterN] = 252,\r\n    _a[CharCode.superscriptTwo] = 253,\r\n    _a[CharCode.blackSquare] = 254,\r\n    _a);\r\n//# sourceMappingURL=unicodemap.js.map\n\nvar RetroTerminal = /** @class */ (function (_super) {\r\n    __extends(RetroTerminal, _super);\r\n    function RetroTerminal(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        // A cache of the tinted font images. Each key is a color, and the image is the font in that color.\r\n        _this._fontColorCache = new Map();\r\n        _this._imageLoaded = false;\r\n        _this._display = new Display(config.width, config.height);\r\n        _this._charWidth = config.charWidth;\r\n        _this._charHeight = config.charHeight;\r\n        _this._scale = window.devicePixelRatio;\r\n        // Font\r\n        _this._font = new Image();\r\n        _this._font.src = config.imageURL;\r\n        // Create canvas\r\n        var canvas = window.document.createElement(\"canvas\");\r\n        var canvasWidth = config.charWidth * config.width;\r\n        var canvasHeight = config.charHeight * config.height;\r\n        canvas.width = canvasWidth * _this._scale;\r\n        canvas.height = canvasHeight * _this._scale;\r\n        canvas.style.width = canvasWidth + \"px\";\r\n        canvas.style.height = canvasHeight + \"px\";\r\n        if (config.mountNode) {\r\n            config.mountNode.appendChild(canvas);\r\n        }\r\n        else {\r\n            document.body.appendChild(canvas);\r\n        }\r\n        _this._canvas = canvas;\r\n        _this._context = canvas.getContext(\"2d\");\r\n        _this._font.onload = function () {\r\n            _this._imageLoaded = true;\r\n            _this.render();\r\n        };\r\n        return _this;\r\n    }\r\n    RetroTerminal.prototype.drawGlyph = function (pos, glyph) {\r\n        this._display.setGlyph(pos, glyph);\r\n    };\r\n    RetroTerminal.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this._imageLoaded)\r\n            return;\r\n        this._display.render(function (pos, glyph) {\r\n            var char = glyph.char;\r\n            // Remap it if it's a Unicode character\r\n            if (unicodeMap[char] !== undefined) {\r\n                char = unicodeMap[char];\r\n            }\r\n            var sx = (char % 32) * _this._charWidth;\r\n            var sy = Math.floor(char / 32) * _this._charHeight;\r\n            // Fill the background\r\n            _this._context.fillStyle = glyph.back.cssColor();\r\n            _this._context.fillRect(pos.x * _this._charWidth * _this._scale, pos.y * _this._charHeight * _this._scale, _this._charWidth * _this._scale, _this._charHeight * _this._scale);\r\n            // Dont bother with empty characters\r\n            if (char == 0 || char == CharCode.space)\r\n                return;\r\n            var color = _this.getColorFont(glyph.fore);\r\n            _this._context.imageSmoothingEnabled = false;\r\n            _this._context.drawImage(color, sx, sy, _this._charWidth, _this._charHeight, pos.x * _this._charWidth * _this._scale, pos.y * _this._charHeight * _this._scale, _this._charWidth * _this._scale, _this._charHeight * _this._scale);\r\n        });\r\n    };\r\n    RetroTerminal.prototype.pixelToChar = function (pixel) {\r\n        var rect = this._canvas.getBoundingClientRect();\r\n        return {\r\n            x: Math.floor((pixel.x - rect.left) / this._charWidth),\r\n            y: Math.floor((pixel.y - rect.top) / this._charHeight),\r\n        };\r\n    };\r\n    RetroTerminal.prototype.getColorFont = function (color) {\r\n        // If cached return\r\n        var colorName = color.cssColor();\r\n        var cached = this._fontColorCache.get(colorName);\r\n        if (cached)\r\n            return cached;\r\n        // Create a font using the given color.\r\n        var tint = window.document.createElement(\"canvas\");\r\n        tint.width = this._font.width;\r\n        tint.height = this._font.height;\r\n        var context = tint.getContext(\"2d\");\r\n        // Draw the font\r\n        context.drawImage(this._font, 0, 0);\r\n        // Tint it by filling in the existing alpha with the color\r\n        context.globalCompositeOperation = \"source-atop\";\r\n        context.fillStyle = color.cssColor();\r\n        context.fillRect(0, 0, this._font.width, this._font.height);\r\n        this._fontColorCache.set(colorName, tint);\r\n        return tint;\r\n    };\r\n    /** Deletes the terminal, removing the canvas. */\r\n    RetroTerminal.prototype.delete = function () {\r\n        var _a;\r\n        (_a = this._canvas.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._canvas);\r\n    };\r\n    return RetroTerminal;\r\n}(RenderableTerminal));\r\n//# sourceMappingURL=retro-terminal.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index = /*#__PURE__*/Object.freeze({\n    CanvasTerminal: CanvasTerminal,\n    Font: Font,\n    RetroTerminal: RetroTerminal,\n    Color: Color,\n    Glyph: Glyph,\n    get CharCode () { return CharCode; },\n    BaseTerminal: BaseTerminal,\n    PortTerminal: PortTerminal\n});\n\nvar KeyCode;\r\n(function (KeyCode) {\r\n    KeyCode[KeyCode[\"Backspace\"] = 8] = \"Backspace\";\r\n    KeyCode[KeyCode[\"Tab\"] = 9] = \"Tab\";\r\n    KeyCode[KeyCode[\"Enter\"] = 13] = \"Enter\";\r\n    KeyCode[KeyCode[\"Shift\"] = 16] = \"Shift\";\r\n    KeyCode[KeyCode[\"Ctrl\"] = 17] = \"Ctrl\";\r\n    KeyCode[KeyCode[\"Alt\"] = 18] = \"Alt\";\r\n    KeyCode[KeyCode[\"PauseBreak\"] = 19] = \"PauseBreak\";\r\n    KeyCode[KeyCode[\"CapsLock\"] = 20] = \"CapsLock\";\r\n    KeyCode[KeyCode[\"Escape\"] = 27] = \"Escape\";\r\n    KeyCode[KeyCode[\"Space\"] = 32] = \"Space\";\r\n    KeyCode[KeyCode[\"PageUp\"] = 33] = \"PageUp\";\r\n    KeyCode[KeyCode[\"PageDown\"] = 34] = \"PageDown\";\r\n    KeyCode[KeyCode[\"End\"] = 35] = \"End\";\r\n    KeyCode[KeyCode[\"Home\"] = 36] = \"Home\";\r\n    KeyCode[KeyCode[\"LeftArrow\"] = 37] = \"LeftArrow\";\r\n    KeyCode[KeyCode[\"UpArrow\"] = 38] = \"UpArrow\";\r\n    KeyCode[KeyCode[\"RightArrow\"] = 39] = \"RightArrow\";\r\n    KeyCode[KeyCode[\"DownArrow\"] = 40] = \"DownArrow\";\r\n    KeyCode[KeyCode[\"Insert\"] = 45] = \"Insert\";\r\n    KeyCode[KeyCode[\"Delete\"] = 46] = \"Delete\";\r\n    KeyCode[KeyCode[\"Zero\"] = 48] = \"Zero\";\r\n    KeyCode[KeyCode[\"ClosedParen\"] = 48] = \"ClosedParen\";\r\n    KeyCode[KeyCode[\"One\"] = 49] = \"One\";\r\n    KeyCode[KeyCode[\"ExclamationMark\"] = 49] = \"ExclamationMark\";\r\n    KeyCode[KeyCode[\"Two\"] = 50] = \"Two\";\r\n    KeyCode[KeyCode[\"AtSign\"] = 50] = \"AtSign\";\r\n    KeyCode[KeyCode[\"Three\"] = 51] = \"Three\";\r\n    KeyCode[KeyCode[\"PoundSign\"] = 51] = \"PoundSign\";\r\n    KeyCode[KeyCode[\"Hash\"] = 51] = \"Hash\";\r\n    KeyCode[KeyCode[\"Four\"] = 52] = \"Four\";\r\n    KeyCode[KeyCode[\"DollarSign\"] = 52] = \"DollarSign\";\r\n    KeyCode[KeyCode[\"Five\"] = 53] = \"Five\";\r\n    KeyCode[KeyCode[\"PercentSign\"] = 53] = \"PercentSign\";\r\n    KeyCode[KeyCode[\"Six\"] = 54] = \"Six\";\r\n    KeyCode[KeyCode[\"Caret\"] = 54] = \"Caret\";\r\n    KeyCode[KeyCode[\"Hat\"] = 54] = \"Hat\";\r\n    KeyCode[KeyCode[\"Seven\"] = 55] = \"Seven\";\r\n    KeyCode[KeyCode[\"Ampersand\"] = 55] = \"Ampersand\";\r\n    KeyCode[KeyCode[\"Eight\"] = 56] = \"Eight\";\r\n    KeyCode[KeyCode[\"Star\"] = 56] = \"Star\";\r\n    KeyCode[KeyCode[\"Asterik\"] = 56] = \"Asterik\";\r\n    KeyCode[KeyCode[\"Nine\"] = 57] = \"Nine\";\r\n    KeyCode[KeyCode[\"OpenParen\"] = 57] = \"OpenParen\";\r\n    KeyCode[KeyCode[\"A\"] = 65] = \"A\";\r\n    KeyCode[KeyCode[\"B\"] = 66] = \"B\";\r\n    KeyCode[KeyCode[\"C\"] = 67] = \"C\";\r\n    KeyCode[KeyCode[\"D\"] = 68] = \"D\";\r\n    KeyCode[KeyCode[\"E\"] = 69] = \"E\";\r\n    KeyCode[KeyCode[\"F\"] = 70] = \"F\";\r\n    KeyCode[KeyCode[\"G\"] = 71] = \"G\";\r\n    KeyCode[KeyCode[\"H\"] = 72] = \"H\";\r\n    KeyCode[KeyCode[\"I\"] = 73] = \"I\";\r\n    KeyCode[KeyCode[\"J\"] = 74] = \"J\";\r\n    KeyCode[KeyCode[\"K\"] = 75] = \"K\";\r\n    KeyCode[KeyCode[\"L\"] = 76] = \"L\";\r\n    KeyCode[KeyCode[\"M\"] = 77] = \"M\";\r\n    KeyCode[KeyCode[\"N\"] = 78] = \"N\";\r\n    KeyCode[KeyCode[\"O\"] = 79] = \"O\";\r\n    KeyCode[KeyCode[\"P\"] = 80] = \"P\";\r\n    KeyCode[KeyCode[\"Q\"] = 81] = \"Q\";\r\n    KeyCode[KeyCode[\"R\"] = 82] = \"R\";\r\n    KeyCode[KeyCode[\"S\"] = 83] = \"S\";\r\n    KeyCode[KeyCode[\"T\"] = 84] = \"T\";\r\n    KeyCode[KeyCode[\"U\"] = 85] = \"U\";\r\n    KeyCode[KeyCode[\"V\"] = 86] = \"V\";\r\n    KeyCode[KeyCode[\"W\"] = 87] = \"W\";\r\n    KeyCode[KeyCode[\"X\"] = 88] = \"X\";\r\n    KeyCode[KeyCode[\"Y\"] = 89] = \"Y\";\r\n    KeyCode[KeyCode[\"Z\"] = 90] = \"Z\";\r\n    KeyCode[KeyCode[\"LeftWindowKey\"] = 91] = \"LeftWindowKey\";\r\n    KeyCode[KeyCode[\"RightWindowKey\"] = 92] = \"RightWindowKey\";\r\n    KeyCode[KeyCode[\"SelectKey\"] = 93] = \"SelectKey\";\r\n    KeyCode[KeyCode[\"Numpad0\"] = 96] = \"Numpad0\";\r\n    KeyCode[KeyCode[\"Numpad1\"] = 97] = \"Numpad1\";\r\n    KeyCode[KeyCode[\"Numpad2\"] = 98] = \"Numpad2\";\r\n    KeyCode[KeyCode[\"Numpad3\"] = 99] = \"Numpad3\";\r\n    KeyCode[KeyCode[\"Numpad4\"] = 100] = \"Numpad4\";\r\n    KeyCode[KeyCode[\"Numpad5\"] = 101] = \"Numpad5\";\r\n    KeyCode[KeyCode[\"Numpad6\"] = 102] = \"Numpad6\";\r\n    KeyCode[KeyCode[\"Numpad7\"] = 103] = \"Numpad7\";\r\n    KeyCode[KeyCode[\"Numpad8\"] = 104] = \"Numpad8\";\r\n    KeyCode[KeyCode[\"Numpad9\"] = 105] = \"Numpad9\";\r\n    KeyCode[KeyCode[\"Multiply\"] = 106] = \"Multiply\";\r\n    KeyCode[KeyCode[\"Add\"] = 107] = \"Add\";\r\n    KeyCode[KeyCode[\"Subtract\"] = 109] = \"Subtract\";\r\n    KeyCode[KeyCode[\"DecimalPoint\"] = 110] = \"DecimalPoint\";\r\n    KeyCode[KeyCode[\"Divide\"] = 111] = \"Divide\";\r\n    KeyCode[KeyCode[\"F1\"] = 112] = \"F1\";\r\n    KeyCode[KeyCode[\"F2\"] = 113] = \"F2\";\r\n    KeyCode[KeyCode[\"F3\"] = 114] = \"F3\";\r\n    KeyCode[KeyCode[\"F4\"] = 115] = \"F4\";\r\n    KeyCode[KeyCode[\"F5\"] = 116] = \"F5\";\r\n    KeyCode[KeyCode[\"F6\"] = 117] = \"F6\";\r\n    KeyCode[KeyCode[\"F7\"] = 118] = \"F7\";\r\n    KeyCode[KeyCode[\"F8\"] = 119] = \"F8\";\r\n    KeyCode[KeyCode[\"F9\"] = 120] = \"F9\";\r\n    KeyCode[KeyCode[\"F10\"] = 121] = \"F10\";\r\n    KeyCode[KeyCode[\"F11\"] = 122] = \"F11\";\r\n    KeyCode[KeyCode[\"F12\"] = 123] = \"F12\";\r\n    KeyCode[KeyCode[\"NumLock\"] = 144] = \"NumLock\";\r\n    KeyCode[KeyCode[\"ScrollLock\"] = 145] = \"ScrollLock\";\r\n    KeyCode[KeyCode[\"SemiColon\"] = 186] = \"SemiColon\";\r\n    KeyCode[KeyCode[\"Equals\"] = 187] = \"Equals\";\r\n    KeyCode[KeyCode[\"Comma\"] = 188] = \"Comma\";\r\n    KeyCode[KeyCode[\"Dash\"] = 189] = \"Dash\";\r\n    KeyCode[KeyCode[\"Period\"] = 190] = \"Period\";\r\n    KeyCode[KeyCode[\"UnderScore\"] = 189] = \"UnderScore\";\r\n    KeyCode[KeyCode[\"PlusSign\"] = 187] = \"PlusSign\";\r\n    KeyCode[KeyCode[\"ForwardSlash\"] = 191] = \"ForwardSlash\";\r\n    KeyCode[KeyCode[\"Tilde\"] = 192] = \"Tilde\";\r\n    KeyCode[KeyCode[\"GraveAccent\"] = 192] = \"GraveAccent\";\r\n    KeyCode[KeyCode[\"OpenBracket\"] = 219] = \"OpenBracket\";\r\n    KeyCode[KeyCode[\"ClosedBracket\"] = 221] = \"ClosedBracket\";\r\n    KeyCode[KeyCode[\"Quote\"] = 222] = \"Quote\";\r\n})(KeyCode || (KeyCode = {}));\r\n//# sourceMappingURL=keycode.js.map\n\n/**\r\n * Represents a global keyboard. Will likely only create one per app.\r\n *\r\n * You can bind/switch KeyboardContexts to the Keyboard handler\r\n * to change input 'modes'.\r\n */\r\nvar KeyboardHandler = /** @class */ (function () {\r\n    /** Creates a new KeyboardHandler */\r\n    function KeyboardHandler() {\r\n        this._isDown = new Set();\r\n        document.addEventListener(\"keydown\", this.onKeyDownEvent.bind(this));\r\n        document.addEventListener(\"keyup\", this.onKeyUpEvent.bind(this));\r\n    }\r\n    KeyboardHandler.prototype.onKeyDownEvent = function (e) {\r\n        this._isDown.add(e.keyCode);\r\n        this.context && this.context.fireOnDown(e.keyCode);\r\n        e.preventDefault();\r\n    };\r\n    KeyboardHandler.prototype.onKeyUpEvent = function (e) {\r\n        this._isDown.delete(e.keyCode);\r\n        this.context && this.context.fireOnUp(e.keyCode);\r\n        e.preventDefault();\r\n    };\r\n    /**\r\n     * Sets the active context of the keyboard handler.\r\n     * @param context KeyboardContext - The context to use\r\n     */\r\n    KeyboardHandler.prototype.setContext = function (context) {\r\n        this.context = context;\r\n    };\r\n    /**\r\n     * Clears the active context for the keyboard handler.\r\n     */\r\n    KeyboardHandler.prototype.clearContext = function () {\r\n        var existing = this.context;\r\n        this.context = undefined;\r\n        return existing;\r\n    };\r\n    /**\r\n     * Returns if a key is currently held down.\r\n     * @param keyCode KeyCode | number - The keyCode to check\r\n     */\r\n    KeyboardHandler.prototype.isKeyDown = function (keyCode) {\r\n        return this._isDown.has(keyCode);\r\n    };\r\n    return KeyboardHandler;\r\n}());\r\n/** Represents a keyboard 'mode', like navigating a menu or world. */\r\nvar KeyboardContext = /** @class */ (function () {\r\n    function KeyboardContext() {\r\n        this._onDown = new Map();\r\n        this._onUp = new Map();\r\n    }\r\n    /**\r\n     * Fires callback on KeyDown\r\n     * @param key KeyCode | number - The Key to monitor\r\n     * @param callback () => void - The callback\r\n     */\r\n    KeyboardContext.prototype.onDown = function (key, callback) {\r\n        this._onDown.set(key, callback);\r\n        return this;\r\n    };\r\n    /**\r\n     * Fires callback on KeyUp\r\n     * @param key KeyCode | number - The Key to monitor\r\n     * @param callback () => void - The callback\r\n     */\r\n    KeyboardContext.prototype.onUp = function (key, callback) {\r\n        this._onUp.set(key, callback);\r\n        return this;\r\n    };\r\n    /**\r\n     * Programmatically fire a callback as if a key was pressed.\r\n     * @param key KeyCode | number - The Key to monitor\r\n     */\r\n    KeyboardContext.prototype.fireOnDown = function (key) {\r\n        var fn = this._onDown.get(key);\r\n        if (fn)\r\n            fn();\r\n    };\r\n    /**\r\n     * Programmatically fire a callback as if a key was lifted.\r\n     * @param key KeyCode | number - The Key to monitor\r\n     */\r\n    KeyboardContext.prototype.fireOnUp = function (key) {\r\n        var fn = this._onUp.get(key);\r\n        if (fn)\r\n            fn();\r\n    };\r\n    return KeyboardContext;\r\n}());\r\n//# sourceMappingURL=keyboard.js.map\n\n/** Abstracts browser mouse input */\r\nvar MouseHandler = /** @class */ (function () {\r\n    /** Creates a new Mouse Handler */\r\n    function MouseHandler() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this._isDown = new Set();\r\n        document.addEventListener(\"mousemove\", this.onMouseUpdateEvent.bind(this), false);\r\n        document.addEventListener(\"mouseenter\", this.onMouseUpdateEvent.bind(this), false);\r\n        document.addEventListener(\"mousedown\", this.onMouseDownEvent.bind(this));\r\n        document.addEventListener(\"mouseup\", this.onMouseUpEvent.bind(this));\r\n    }\r\n    MouseHandler.prototype.onMouseDownEvent = function (e) {\r\n        this._isDown.add(e.button);\r\n        if (this.context) {\r\n            var x = e.pageX;\r\n            var y = e.pageY;\r\n            this.context.callOnMouseDown({ x: x, y: y }, e.button);\r\n        }\r\n    };\r\n    MouseHandler.prototype.onMouseUpEvent = function (e) {\r\n        this._isDown.delete(e.button);\r\n        if (this.context) {\r\n            var x = e.pageX;\r\n            var y = e.pageY;\r\n            this.context.callOnMouseUp({ x: x, y: y }, e.button);\r\n        }\r\n    };\r\n    MouseHandler.prototype.onMouseUpdateEvent = function (e) {\r\n        this.x = e.pageX;\r\n        this.y = e.pageY;\r\n    };\r\n    /**\r\n     * Returns true if the given mouse button is down.\r\n     * @param mouseButton number - Default 0 for left click.\r\n     */\r\n    MouseHandler.prototype.isMouseDown = function (mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        return this._isDown.has(mouseButton);\r\n    };\r\n    /** Gets the current window position of the mouse */\r\n    MouseHandler.prototype.getPos = function () {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n        };\r\n    };\r\n    /**\r\n     * Sets the active mouse context\r\n     * @param context MouseContext\r\n     */\r\n    MouseHandler.prototype.setContext = function (context) {\r\n        this.context = context;\r\n    };\r\n    /** Clears the active mouse context */\r\n    MouseHandler.prototype.clearContext = function () {\r\n        this.context = undefined;\r\n    };\r\n    return MouseHandler;\r\n}());\r\nvar MouseContext = /** @class */ (function () {\r\n    function MouseContext() {\r\n        this.onDown = new Map();\r\n        this.onUp = new Map();\r\n    }\r\n    /**\r\n     * Registers a callback for a mousedown event\r\n     * @param callback - The function to call on mousedown\r\n     * @param mouseButton - The mouse button number. Default 0 for left click.\r\n     */\r\n    MouseContext.prototype.onMouseDown = function (callback, mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        this.onDown.set(mouseButton, callback);\r\n        return this;\r\n    };\r\n    /**\r\n     * Registers a callback for a mouseup event\r\n     * @param callback - The function to call on mouseup\r\n     * @param mouseButton - The mouse button number. Default 0 for left click.\r\n     */\r\n    MouseContext.prototype.onMouseUp = function (callback, mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        this.onUp.set(mouseButton, callback);\r\n        return this;\r\n    };\r\n    /**\r\n     * Clears a registered function for mousedown\r\n     * @param mouseButton - The mouse button to clear. Default 0 for left click.\r\n     */\r\n    MouseContext.prototype.clearMouseDown = function (mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        this.onDown.delete(mouseButton);\r\n    };\r\n    /**\r\n     * Clears a registered function for mouseup\r\n     * @param mouseButton - The mouse button to clear. Default 0 for left click.\r\n     */\r\n    MouseContext.prototype.clearMouseUp = function (mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        this.onUp.delete(mouseButton);\r\n    };\r\n    /**\r\n     * Invokes a registered callback for mousedown\r\n     * @param pos Vector2 - The pos for the mouse\r\n     * @param mouseButton - The mouse button pressed\r\n     */\r\n    MouseContext.prototype.callOnMouseDown = function (pos, mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        var callback = this.onDown.get(mouseButton);\r\n        if (callback)\r\n            callback(pos);\r\n    };\r\n    /**\r\n     * Invokes a registered callback for mouseup\r\n     * @param pos\r\n     * @param mouseButton\r\n     */\r\n    MouseContext.prototype.callOnMouseUp = function (pos, mouseButton) {\r\n        if (mouseButton === void 0) { mouseButton = 0; }\r\n        var callback = this.onUp.get(mouseButton);\r\n        if (callback)\r\n            callback(pos);\r\n    };\r\n    return MouseContext;\r\n}());\r\n//# sourceMappingURL=mouse.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n    get KeyCode () { return KeyCode; },\n    KeyboardContext: KeyboardContext,\n    KeyboardHandler: KeyboardHandler,\n    MouseHandler: MouseHandler,\n    MouseContext: MouseContext\n});\n\n//# sourceMappingURL=vector.js.map\n\n// ToDo - Make this more efficient via heap\r\nvar PriorityQueue = /** @class */ (function () {\r\n    function PriorityQueue(priorityFunc) {\r\n        this.data = [];\r\n        this.priorityFunc = priorityFunc;\r\n    }\r\n    PriorityQueue.prototype.insert = function (data) {\r\n        var score = this.priorityFunc(data);\r\n        this.data.push([score, data]);\r\n    };\r\n    PriorityQueue.prototype.peek = function () {\r\n        if (this.data.length === 0)\r\n            return undefined;\r\n        var min = Infinity;\r\n        var minIndex = -1;\r\n        this.data.forEach(function (_a, index) {\r\n            var val = _a[0], d = _a[1];\r\n            if (val < min) {\r\n                min = val;\r\n                minIndex = index;\r\n            }\r\n        });\r\n        return this.data[minIndex][1];\r\n    };\r\n    PriorityQueue.prototype.pop = function () {\r\n        if (this.data.length === 0)\r\n            return undefined;\r\n        var min = Infinity;\r\n        var minIndex = -1;\r\n        this.data.forEach(function (_a, index) {\r\n            var val = _a[0], d = _a[1];\r\n            if (val < min) {\r\n                min = val;\r\n                minIndex = index;\r\n            }\r\n        });\r\n        var popped = this.data.splice(minIndex, 1);\r\n        return popped[0][1];\r\n    };\r\n    PriorityQueue.prototype.size = function () {\r\n        return this.data.length;\r\n    };\r\n    return PriorityQueue;\r\n}());\r\n//# sourceMappingURL=priority-queue.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n    Table: Table,\n    PriorityQueue: PriorityQueue\n});\n\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\r\n// Johannes Baagøe <baagoe@baagoe.com>, 2010\r\nfunction Mash() {\r\n    var n = 0xefc8249d;\r\n    var mash = function (data) {\r\n        data = data.toString();\r\n        for (var i = 0; i < data.length; i++) {\r\n            n += data.charCodeAt(i);\r\n            var h = 0.02519603282416938 * n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            h *= n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            n += h * 0x100000000; // 2^32\r\n        }\r\n        return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\r\n    };\r\n    return mash;\r\n}\r\nvar AleaRNG = /** @class */ (function () {\r\n    function AleaRNG(seed) {\r\n        this.s0 = 0;\r\n        this.s1 = 0;\r\n        this.s2 = 0;\r\n        this.c = 0;\r\n        // Initialize seed if needed\r\n        this.seed = seed === undefined ? new Date().toString() : seed;\r\n        this.reset();\r\n    }\r\n    AleaRNG.prototype.reset = function () {\r\n        var mash = Mash();\r\n        // Initial mashes\r\n        this.s0 = mash(\" \");\r\n        this.s1 = mash(\" \");\r\n        this.s2 = mash(\" \");\r\n        this.c = 1;\r\n        this.s0 -= mash(this.seed);\r\n        this.s1 -= mash(this.seed);\r\n        this.s2 -= mash(this.seed);\r\n        this.sanitize();\r\n    };\r\n    AleaRNG.prototype.sanitize = function () {\r\n        if (this.s0 < 0)\r\n            this.s0 += 1;\r\n        if (this.s1 < 0)\r\n            this.s1 += 1;\r\n        if (this.s2 < 0)\r\n            this.s2 += 1;\r\n    };\r\n    AleaRNG.prototype.step = function () {\r\n        // The dark magic that makes the number generator run\r\n        var t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\r\n        this.s0 = this.s1;\r\n        this.s1 = this.s2;\r\n        return (this.s2 = t - (this.c = t | 0));\r\n    };\r\n    // Returns between [0,1)\r\n    AleaRNG.prototype.nextRand = function () {\r\n        return (this.step() + ((this.step() * 0x200000) | 0) * 1.1102230246251565e-16); // 2^-53\r\n    };\r\n    AleaRNG.prototype.next = function (min, max) {\r\n        if (min === void 0) { min = 0; }\r\n        if (max === void 0) { max = 1; }\r\n        return this.nextRand() * (max - min) + min;\r\n    };\r\n    AleaRNG.prototype.nextInt = function (min, max) {\r\n        if (min === void 0) { min = 0; }\r\n        if (max === void 0) { max = 100; }\r\n        return Math.floor(this.next() * (max - min) + min);\r\n    };\r\n    AleaRNG.prototype.nextBoolean = function () {\r\n        return this.nextRand() > 0.5;\r\n    };\r\n    AleaRNG.prototype.nextItem = function (array) {\r\n        if (array.length === 0)\r\n            return undefined;\r\n        var i = this.nextInt(0, array.length);\r\n        return array[i];\r\n    };\r\n    AleaRNG.prototype.shuffle = function (array) {\r\n        var result = [];\r\n        var clone = array.slice();\r\n        while (clone.length) {\r\n            var index = this.nextInt(0, clone.length);\r\n            result.push(clone.splice(index, 1)[0]);\r\n        }\r\n        return result;\r\n    };\r\n    AleaRNG.prototype.clone = function () {\r\n        var a = new AleaRNG();\r\n        a.s0 = this.s0;\r\n        a.s1 = this.s1;\r\n        a.s2 = this.s2;\r\n        a.c = this.c;\r\n        return a;\r\n    };\r\n    return AleaRNG;\r\n}());\r\n//# sourceMappingURL=alea.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n    AleaRNG: AleaRNG\n});\n\n/** Contains math for common vector operations. */\r\nvar Vector = /** @class */ (function () {\r\n    function Vector() {\r\n    }\r\n    /**\r\n     * Returns true if two vectors have the same x and y values.\r\n     * @param v1 The first Vector2.\r\n     * @param v2 The second Vector2.\r\n     */\r\n    Vector.areEqual = function (v1, v2) {\r\n        return v1.x === v2.x && v1.y === v2.y;\r\n    };\r\n    /**\r\n     * Returns the distance between two vectors.\r\n     *\r\n     * If no topology is given, diagonal distance is sqrt(2).\r\n     * If topology is four, diagonal distance is 2.\r\n     * If topology is eight, diagonal distance is 1.\r\n     *\r\n     * @param start The starting Vector2.\r\n     * @param end The ending Vector2.\r\n     * @param topology Can use \"four\" or \"eight\" for non-cartesian distances.\r\n     */\r\n    Vector.getDistance = function (start, end, topology) {\r\n        if (topology === \"four\") {\r\n            return Math.abs(start.x - end.x) + Math.abs(start.y - end.y);\r\n        }\r\n        else if (topology === \"eight\") {\r\n            return Math.max(Math.abs(start.x - end.x), Math.abs(start.y - end.y));\r\n        }\r\n        else {\r\n            var a = start.x - end.x;\r\n            var b = start.y - end.y;\r\n            return Math.sqrt(a * a + b * b);\r\n        }\r\n    };\r\n    /**\r\n     * Will find the center of an area by averaging all Vectors in the area.\r\n     * This point may not be in the area itself, for example in a donut shaped area.\r\n     * @param area Vector2\r\n     */\r\n    Vector.getCenter = function (area) {\r\n        if (area.length < 1) {\r\n            throw new Error(\"Error: Trying to find center of empty area\");\r\n        }\r\n        var sx = 0;\r\n        var sy = 0;\r\n        for (var _i = 0, area_1 = area; _i < area_1.length; _i++) {\r\n            var v = area_1[_i];\r\n            sx += v.x;\r\n            sy += v.y;\r\n        }\r\n        return {\r\n            x: sx / area.length,\r\n            y: sy / area.length,\r\n        };\r\n    };\r\n    /**\r\n     * Will find the position in the area closest to the target\r\n     * @param area Vector2[]\r\n     * @param target Vector2\r\n     * @param topology Either 'four' or 'eight'. Default 'four'\r\n     */\r\n    Vector.getClosest = function (area, target, topology) {\r\n        if (topology === void 0) { topology = \"four\"; }\r\n        // Throw an error if area is empty\r\n        if (area.length < 1) {\r\n            throw new Error(\"Error: Trying to find closest position of an empty area\");\r\n        }\r\n        // Keep track of the closest we've found.\r\n        var minDistance = Infinity;\r\n        var closest = area[0];\r\n        for (var _i = 0, area_2 = area; _i < area_2.length; _i++) {\r\n            var v = area_2[_i];\r\n            var distance = Vector.getDistance(target, v, topology);\r\n            // Found exact one, immediately return\r\n            if (distance === 0) {\r\n                return {\r\n                    x: target.x,\r\n                    y: target.y,\r\n                };\r\n            }\r\n            // Closer than currently known\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                closest = v;\r\n            }\r\n        }\r\n        return closest;\r\n    };\r\n    return Vector;\r\n}());\r\n//# sourceMappingURL=vector.js.map\n\n//# sourceMappingURL=index.js.map\n\nfunction getRing8(originX, originY, range) {\r\n    if (range === 0)\r\n        return [{ x: originX, y: originY }];\r\n    var ring = [];\r\n    var maxX = originX + range;\r\n    var minX = originX - range;\r\n    var maxY = originY + range;\r\n    var minY = originY - range;\r\n    //Start at the 3 o'clock, (0 degrees), rotate all the way around\r\n    // Top Right Side, no corner\r\n    for (var x = maxX, y = originY; y > minY; y--) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Top Side, right to left. Include top corners\r\n    for (var x = maxX, y = minY; x >= minX; x--) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Left side, no corners\r\n    for (var x = minX, y = minY + 1; y < maxY; y++) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Bottom side, corners\r\n    for (var x = minX, y = maxY; x <= maxX; x++) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Right side back to to 0 degrees, no corner\r\n    for (var x = maxX, y = maxY - 1; y > originY; y--) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    return ring;\r\n}\r\nfunction getRing4(originX, originY, range) {\r\n    if (range === 0) {\r\n        return [\r\n            {\r\n                x: originX,\r\n                y: originY,\r\n            },\r\n        ];\r\n    }\r\n    var ring = [];\r\n    var maxX = originX + range;\r\n    var minX = originX - range;\r\n    var maxY = originY + range;\r\n    var minY = originY - range;\r\n    // Top right arc\r\n    for (var x = maxX, y = originY; x > originX; x--, y--) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Top left arc\r\n    for (var x = originX, y = minY; x > minX; x--, y++) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Bottom left arc\r\n    for (var x = minX, y = originY; x < originX; x++, y++) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    // Bottom right arc\r\n    for (var x = originX, y = maxY; x < maxX; x++, y--) {\r\n        ring.push({ x: x, y: y });\r\n    }\r\n    return ring;\r\n}\r\n//# sourceMappingURL=get-ring.js.map\n\nvar AStar = /** @class */ (function () {\r\n    /**\r\n     * @param config - General parameters for the AStar Pathfinder\r\n     * @param config.isBlockedCallback - Return true if the position is blocked.\r\n     * @param config.topology - four | eight\r\n     */\r\n    function AStar(config) {\r\n        this.isBlocked = config.isBlockedCallback;\r\n        this.topology = config.topology;\r\n    }\r\n    /**\r\n     * Get all neightbors of a point. Returns orthogonal\r\n     * directions first, then diagonal if topology is 8.\r\n     * Results in more natural looking paths.\r\n     * @param pos - Vector2\r\n     */\r\n    AStar.prototype.getNeighbors = function (pos) {\r\n        var neighbors = getRing4(pos.x, pos.y, 1);\r\n        if (this.topology === \"eight\") {\r\n            neighbors.push({ x: pos.x + 1, y: pos.y - 1 });\r\n            neighbors.push({ x: pos.x - 1, y: pos.y - 1 });\r\n            neighbors.push({ x: pos.x - 1, y: pos.y + 1 });\r\n            neighbors.push({ x: pos.x + 1, y: pos.y + 1 });\r\n        }\r\n        return neighbors;\r\n    };\r\n    /**\r\n     * @param start Vector2 - The starting position\r\n     * @param end  Vector2 - The ending position\r\n     *\r\n     * @returns Vector2[] | undefined - Returns the path,\r\n     * including start + end, or undefined if no path is found.\r\n     */\r\n    AStar.prototype.compute = function (start, end) {\r\n        var _this = this;\r\n        // openSet is the set of discovered nodes, and more might be found\r\n        var openSet = new PriorityQueue(function (n) { return n.fScore; });\r\n        openSet.insert({\r\n            v: start,\r\n            fScore: Vector.getDistance(start, end, \"eight\"),\r\n        });\r\n        // cameFrom maps a node to the one preceding it with the cheapest path\r\n        var cameFrom = new Map();\r\n        // gScore tracks the cheapest path from start to the node\r\n        // fScore tracks gScore + esimated\r\n        var gScore = new Map();\r\n        gScore.set(start.x + \":\" + start.y, 0);\r\n        while (openSet.size()) {\r\n            var current = openSet.pop().v;\r\n            if (Vector.areEqual(current, end)) {\r\n                var curStr = current.x + \":\" + current.y;\r\n                var totalPath = [current];\r\n                while (cameFrom.has(curStr)) {\r\n                    var prevStr = cameFrom.get(curStr);\r\n                    var _a = prevStr.split(\":\"), x = _a[0], y = _a[1];\r\n                    curStr = prevStr;\r\n                    totalPath.unshift({\r\n                        x: Number.parseInt(x),\r\n                        y: Number.parseInt(y),\r\n                    });\r\n                }\r\n                return totalPath;\r\n            }\r\n            var neighbors = this.getNeighbors(current);\r\n            if (this.isBlocked) {\r\n                neighbors = neighbors.filter(function (v) { return _this.isBlocked(v) === false; });\r\n            }\r\n            var currentGScore = gScore.get(current.x + \":\" + current.y);\r\n            for (var _i = 0, neighbors_1 = neighbors; _i < neighbors_1.length; _i++) {\r\n                var n = neighbors_1[_i];\r\n                // ToDo - allow the distance to be determined by function\r\n                var tentative_gScore = currentGScore + 1;\r\n                if (gScore.has(n.x + \":\" + n.y) === false) {\r\n                    cameFrom.set(n.x + \":\" + n.y, current.x + \":\" + current.y);\r\n                    gScore.set(n.x + \":\" + n.y, tentative_gScore);\r\n                    var fScore = tentative_gScore + Vector.getDistance(n, end, \"eight\");\r\n                    openSet.insert({\r\n                        v: n,\r\n                        fScore: fScore,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // We never got current == end\r\n        return undefined;\r\n    };\r\n    return AStar;\r\n}());\r\n//# sourceMappingURL=astar.js.map\n\n/**\r\n * Connects areas of the map to ensure they are all connected.\r\n *\r\n * For instance, if you're using an alive value of 1 for walls,\r\n * then this can connect the dead value of 0 to ensure all\r\n * squares on the map are accessable.\r\n *\r\n * @param value The value to connect (default this.deadValue)\r\n */\r\nfunction connect(table, value) {\r\n    var spacesToConnect = new Set();\r\n    var groups = [];\r\n    var paths = [];\r\n    // Get all spaces with the value\r\n    for (var x = 0; x < table.width; x++) {\r\n        for (var y = 0; y < table.height; y++) {\r\n            if (table.get({ x: x, y: y }) === value) {\r\n                spacesToConnect.add(x + \":\" + y);\r\n            }\r\n        }\r\n    }\r\n    // Figure out which groups there are\r\n    while (spacesToConnect.size > 0) {\r\n        var v = Array.from(spacesToConnect.entries())[0][0];\r\n        var _a = v.split(\":\"), x = _a[0], y = _a[1];\r\n        var position = {\r\n            x: Number.parseInt(x),\r\n            y: Number.parseInt(y),\r\n        };\r\n        // Grab an area, then remove those tiles from the spacesToConnect\r\n        var selection = table.floodFillSelect(position);\r\n        groups.push(selection);\r\n        for (var _i = 0, selection_1 = selection; _i < selection_1.length; _i++) {\r\n            var s = selection_1[_i];\r\n            spacesToConnect.delete(s.x + \":\" + s.y);\r\n        }\r\n    }\r\n    // spacesToConnect is now empty.\r\n    // Each group in groups is an isolated set of tiles\r\n    for (var i = 0; i < groups.length; i++) {\r\n        // Ignore the last group\r\n        if (i === groups.length - 1)\r\n            break;\r\n        var current = groups[i];\r\n        var next = groups[i + 1];\r\n        // Get the center point from each area\r\n        var currentCenter = Vector.getCenter(current);\r\n        var currentPoint = Vector.getClosest(current, currentCenter);\r\n        var nextCenter = Vector.getCenter(next);\r\n        var nextPoint = Vector.getClosest(next, nextCenter);\r\n        // Get two points that are close to the edge for each section\r\n        var closestCurrent = Vector.getClosest(next, currentPoint);\r\n        var closestNext = Vector.getClosest(current, nextPoint);\r\n        var a = new AStar({ topology: \"four\" });\r\n        var connection = a.compute(closestCurrent, closestNext);\r\n        // Connect the paths\r\n        if (!connection)\r\n            throw new Error(\"Error: Could not connect cell areas\");\r\n        for (var _b = 0, connection_1 = connection; _b < connection_1.length; _b++) {\r\n            var v = connection_1[_b];\r\n            table.set(v, value);\r\n        }\r\n        paths.push(connection);\r\n    }\r\n    return {\r\n        groups: groups,\r\n        paths: paths,\r\n    };\r\n}\r\n//# sourceMappingURL=connect.js.map\n\n/** Used to create CellularAutomata Maps. */\r\nvar CellularAutomata = /** @class */ (function () {\r\n    /**\r\n     * Creates a Cellular Automata Map Generator\r\n     *\r\n     * @param width The width of the map.\r\n     * @param height The height of the map.\r\n     * @param options Additional options.\r\n     */\r\n    function CellularAutomata(width, height, options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.table = new Table(width, height);\r\n        // Set up defaults\r\n        this.aliveValue =\r\n            options.aliveValue === undefined ? 1 : options.aliveValue;\r\n        this.deadValue =\r\n            options.deadValue === undefined ? 0 : options.deadValue;\r\n        this.rng = options.rng === undefined ? new AleaRNG() : options.rng;\r\n    }\r\n    /**\r\n     * Randomly sets each cell to either alive or dead.\r\n     *\r\n     * @param isAliveChance The chance for a cell to be set to the 'alive' value.\r\n     */\r\n    CellularAutomata.prototype.randomize = function (isAliveChance) {\r\n        if (isAliveChance === void 0) { isAliveChance = 0.6; }\r\n        for (var x = 0; x < this.table.width; x++) {\r\n            for (var y = 0; y < this.table.height; y++) {\r\n                var isAlive = this.rng.next() > isAliveChance;\r\n                if (isAlive) {\r\n                    this.table.set({ x: x, y: y }, this.aliveValue);\r\n                }\r\n                else {\r\n                    this.table.set({ x: x, y: y }, this.deadValue);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    CellularAutomata.prototype.countAliveNeighbors = function (x, y) {\r\n        var count = 0;\r\n        for (var i = -1; i < 2; i++) {\r\n            for (var j = -1; j < 2; j++) {\r\n                var neighbor_x = x + i;\r\n                var neighbor_y = y + j;\r\n                if (i == 0 && j == 0) ;\r\n                else if (this.table.isInBounds({ x: neighbor_x, y: neighbor_y }) == false) {\r\n                    count++;\r\n                }\r\n                else if (this.table.get({ x: neighbor_x, y: neighbor_y }) == this.aliveValue) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    };\r\n    /**\r\n     * Runs a number of simulation steps.\r\n     * Each step generally \"smooths\" the map.\r\n     *\r\n     * @param stepCount The number of steps to run.\r\n     */\r\n    CellularAutomata.prototype.doSimulationStep = function (stepCount) {\r\n        if (stepCount === void 0) { stepCount = 1; }\r\n        for (var step = 0; step < stepCount; step++) {\r\n            var newMap = new Table(this.table.width, this.table.height);\r\n            var oldMap = this.table; //this just renames the table to prevent 'this' all over the place.\r\n            for (var x = 0; x < oldMap.width; x++) {\r\n                for (var y = 0; y < oldMap.height; y++) {\r\n                    var nbs = this.countAliveNeighbors(x, y);\r\n                    if (oldMap.get({ x: x, y: y }) === this.aliveValue) {\r\n                        if (nbs < 4) {\r\n                            newMap.set({ x: x, y: y }, this.deadValue);\r\n                        }\r\n                        else {\r\n                            newMap.set({ x: x, y: y }, this.aliveValue);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (nbs > 3) {\r\n                            newMap.set({ x: x, y: y }, this.aliveValue);\r\n                        }\r\n                        else {\r\n                            newMap.set({ x: x, y: y }, this.deadValue);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.table = newMap;\r\n        }\r\n    };\r\n    /**\r\n     * Connects areas of the map to ensure they are all connected.\r\n     *\r\n     * For instance, if you're using an alive value of 1 for walls,\r\n     * then this can connect the dead value of 0 to ensure all\r\n     * squares on the map are accessable.\r\n     *\r\n     * @param value The value to connect (default this.deadValue)\r\n     */\r\n    CellularAutomata.prototype.connect = function (value) {\r\n        if (value === void 0) { value = this.deadValue; }\r\n        return connect(this.table, value);\r\n    };\r\n    return CellularAutomata;\r\n}());\r\n//# sourceMappingURL=cellular-automata.js.map\n\n/** Generator to perform a Drunkard's Walk*/\r\nvar DrunkardsWalk = /** @class */ (function () {\r\n    /**\r\n     * Creates a new DrunkardsWalk Generator\r\n     * @param config - Generator Config\r\n     * @param config.width number - Width of the map\r\n     * @param config.height number - Height of the map\r\n     * @param config.rng IRNG - Optional random number generator\r\n     * @param config.topology \"four\" | \"eight\" - Topology to use. Default four.\r\n     */\r\n    function DrunkardsWalk(config) {\r\n        var _a, _b;\r\n        this._path = [];\r\n        this._steps = 0;\r\n        this._coveredCount = 0;\r\n        this.table = new Table(config.width, config.height);\r\n        this._rng = (_a = config.rng) !== null && _a !== void 0 ? _a : new AleaRNG();\r\n        this._topology = (_b = config.topology) !== null && _b !== void 0 ? _b : \"four\";\r\n        // Initialize Table\r\n        this.table.fill(0);\r\n    }\r\n    /**\r\n     * Returns the path traveled so far.\r\n     */\r\n    DrunkardsWalk.prototype.getPath = function () {\r\n        return this._path;\r\n    };\r\n    /**\r\n     * Returns the last visited location.\r\n     */\r\n    DrunkardsWalk.prototype.getCurrent = function () {\r\n        return this._path[this._path.length - 1];\r\n    };\r\n    /**\r\n     * Returns the total number of steps taken\r\n     */\r\n    DrunkardsWalk.prototype.getSteps = function () {\r\n        return this._steps;\r\n    };\r\n    /**\r\n     * Returns the total number of unique spaces visited\r\n     */\r\n    DrunkardsWalk.prototype.getCoveredCount = function () {\r\n        return this._coveredCount;\r\n    };\r\n    /**\r\n     * Adds a point to the drunkards walk,\r\n     * adjusting path, table, and steps as needed.\r\n     * @param point Vector2 - The point to add\r\n     */\r\n    DrunkardsWalk.prototype.addPoint = function (point) {\r\n        this._steps++;\r\n        if (this.table.get(point) !== 1) {\r\n            this._coveredCount++;\r\n        }\r\n        this.table.set(point, 1);\r\n        this._path.push(point);\r\n    };\r\n    /**\r\n     * Generate a path by walking a number of steps.\r\n     * Can be called multiple times to have the Drunkard 'jump' to a different spot.\r\n     * @param config - The walk configuration\r\n     * @param config.steps number - The number of steps to take.\r\n     * @param config.start Vector2 - The starting position. Default random.\r\n     * @param config.maxCoveredTiles number - Stops walking if the total number of tiles\r\n     * ever covered reaches this limit. Default Infinity.\r\n     */\r\n    DrunkardsWalk.prototype.walkSteps = function (config) {\r\n        var _a, _b;\r\n        // Initialize config\r\n        var maxCoveredTiles = (_a = config.maxCoveredTiles) !== null && _a !== void 0 ? _a : Infinity;\r\n        var steps = config.steps;\r\n        // Set the initial coordinate\r\n        this.addPoint((_b = config.start) !== null && _b !== void 0 ? _b : this.getRandPoint());\r\n        for (var i = 0; i < steps - 1; i++) {\r\n            // Break if we're over the covered limit\r\n            if (this._coveredCount >= maxCoveredTiles) {\r\n                break;\r\n            }\r\n            var current = this._path[this._path.length - 1];\r\n            var next = this.getRandomNeighbor(current);\r\n            this.addPoint(next);\r\n        }\r\n    };\r\n    DrunkardsWalk.prototype.getRandPoint = function () {\r\n        var x = this._rng.nextInt(0, this.table.width);\r\n        var y = this._rng.nextInt(0, this.table.height);\r\n        return { x: x, y: y };\r\n    };\r\n    DrunkardsWalk.prototype.getRandomNeighbor = function (pos) {\r\n        var next = undefined;\r\n        while (next === undefined) {\r\n            // Get next neighbor\r\n            var neighbors = this._topology === \"four\"\r\n                ? getRing4(pos.x, pos.y, 1)\r\n                : getRing8(pos.x, pos.y, 1);\r\n            var n = this._rng.nextItem(neighbors);\r\n            // Check if it is in bounds\r\n            if (this.table.isInBounds(n)) {\r\n                next = n;\r\n            }\r\n        }\r\n        return next;\r\n    };\r\n    return DrunkardsWalk;\r\n}());\r\n//# sourceMappingURL=drunkards-walk.js.map\n\n// export { BSPTreeRect } from \"./bsp-tree\";\r\n//# sourceMappingURL=index.js.map\n\nvar index$4 = /*#__PURE__*/Object.freeze({\n    CellularAutomata: CellularAutomata,\n    DrunkardsWalk: DrunkardsWalk\n});\n\nvar Dijkstra = /** @class */ (function () {\r\n    function Dijkstra(config) {\r\n        this.isBlocked = config.isBlockedCallback;\r\n        this.topology = config.topology;\r\n    }\r\n    Dijkstra.prototype.getNeighbors = function (pos) {\r\n        var neighbors = getRing4(pos.x, pos.y, 1);\r\n        if (this.topology === \"eight\") {\r\n            neighbors.push({ x: pos.x + 1, y: pos.y - 1 });\r\n            neighbors.push({ x: pos.x - 1, y: pos.y - 1 });\r\n            neighbors.push({ x: pos.x - 1, y: pos.y + 1 });\r\n            neighbors.push({ x: pos.x + 1, y: pos.y + 1 });\r\n        }\r\n        return neighbors;\r\n    };\r\n    /**\r\n     * Compute processes the distances between start and end goals\r\n     * @param initial\r\n     * @param goal\r\n     */\r\n    Dijkstra.prototype.compute = function (initial, goal) {\r\n        var _this = this;\r\n        //unpackage config.\r\n        var cameFrom = new Map();\r\n        var processed = new Set();\r\n        var processing = [initial];\r\n        cameFrom.set(initial.x + \":\" + initial.y, \"\");\r\n        while (processing.length !== 0) {\r\n            //shift the last node off the array.\r\n            var current = processing.shift();\r\n            //short circut\r\n            if (processed.has(current.x + \":\" + current.y)) {\r\n                continue;\r\n            }\r\n            else {\r\n                processed.add(current.x + \":\" + current.y);\r\n            }\r\n            // check to see if the space is where you need to be. If so, exit loop.\r\n            if (Vector.areEqual(current, goal)) {\r\n                var curStr = current.x + \":\" + current.y;\r\n                var totalPath = [current];\r\n                while (cameFrom.get(curStr)) {\r\n                    var prevStr = cameFrom.get(curStr);\r\n                    var _a = prevStr.split(\":\"), x = _a[0], y = _a[1];\r\n                    curStr = prevStr;\r\n                    totalPath.unshift({\r\n                        x: Number.parseInt(x),\r\n                        y: Number.parseInt(y),\r\n                    });\r\n                }\r\n                return totalPath;\r\n            }\r\n            var neighbors = this.getNeighbors(current);\r\n            if (this.isBlocked) {\r\n                neighbors = neighbors.filter(function (v) { return _this.isBlocked(v) === false; });\r\n            }\r\n            for (var _i = 0, neighbors_1 = neighbors; _i < neighbors_1.length; _i++) {\r\n                var n = neighbors_1[_i];\r\n                processing.push(n);\r\n                if (cameFrom.has(n.x + \":\" + n.y) === false) {\r\n                    cameFrom.set(n.x + \":\" + n.y, current.x + \":\" + current.y);\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return Dijkstra;\r\n}());\n\n//# sourceMappingURL=index.js.map\n\nvar index$5 = /*#__PURE__*/Object.freeze({\n    AStar: AStar,\n    Dijkstra: Dijkstra\n});\n\nfunction box(terminal, options) {\r\n    var x1 = options.x1, x2 = options.x2, y1 = options.y1, y2 = options.y2, title = options.title;\r\n    // Corners\r\n    terminal.drawGlyph({ x: x1, y: y1 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleDownAndRight));\r\n    terminal.drawGlyph({ x: x2, y: y1 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleDownAndLeft));\r\n    terminal.drawGlyph({ x: x1, y: y2 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleUpAndRight));\r\n    terminal.drawGlyph({ x: x2, y: y2 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleUpAndLeft));\r\n    // Horizontal Bars\r\n    for (var dx = x1 + 1; dx < x2; dx++) {\r\n        terminal.drawGlyph({ x: dx, y: y1 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleHorizontal));\r\n        terminal.drawGlyph({ x: dx, y: y2 }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleHorizontal));\r\n    }\r\n    // Vertical Bars\r\n    for (var dy = y1 + 1; dy < y2; dy++) {\r\n        terminal.drawGlyph({ x: x1, y: dy }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleVertical));\r\n        terminal.drawGlyph({ x: x2, y: dy }, Glyph.fromCharCode(CharCode.boxDrawingsDoubleVertical));\r\n    }\r\n    if (title) {\r\n        terminal.writeAt({ x: x1 + 2, y: y1 }, \" \" + title + \" \");\r\n    }\r\n}\r\n//# sourceMappingURL=box.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index$6 = /*#__PURE__*/Object.freeze({\n    box: box\n});\n\n/** FOV Algorithm that calculates angles of shadows and merges them together. */\r\nvar PreciseShadowcasting = /** @class */ (function () {\r\n    /**\r\n     * Creates a new PreciseShadowcasting object\r\n     * which can calulate viewsheds.\r\n     *\r\n     * @param config\r\n     * @param config.lightPasses Vector2 => Boolean - Whether a position is visible\r\n     * @param config.topology \"four\" | \"eight\" | \"free\" - The topology to use\r\n     * @param config.returnAll Return all spaces in range, even if not visible. Default false.\r\n     * @param config.cartesianRange If set, will calculate range as a^2 + b^2 = c^2. Results in round shape. Default false.\r\n     */\r\n    function PreciseShadowcasting(config) {\r\n        var _a, _b;\r\n        this.lightPasses = config.lightPasses;\r\n        // free uses an 8 ring topology\r\n        this.getRing = config.topology === \"four\" ? getRing4 : getRing8;\r\n        this.returnAll = (_a = config.returnAll) !== null && _a !== void 0 ? _a : false;\r\n        this.cartesianRange = (_b = config.cartesianRange) !== null && _b !== void 0 ? _b : false;\r\n    }\r\n    /**\r\n     * Calculates an array of visible Vectors. Same as calculateCallback,\r\n     * but returns an Array instead.\r\n     *\r\n     * @param origin Vector2 - The position to start from.\r\n     * @param range Number - The range of vision\r\n     */\r\n    PreciseShadowcasting.prototype.calculateArray = function (origin, range) {\r\n        var v = [];\r\n        this.calculateCallback(origin, range, function (pos, r, visibility) {\r\n            v.push({ pos: pos, r: r, visibility: visibility });\r\n        });\r\n        return v;\r\n    };\r\n    /**\r\n     * Calculates visible positions, and invokes the given callback for each one.\r\n     *\r\n     * @param origin Vector2 - The position to start from\r\n     * @param range Number - The range of vision\r\n     * @param callback (pos: Vector2, range: number, visibility: number) => void - The function to call for each visible tile\r\n     */\r\n    PreciseShadowcasting.prototype.calculateCallback = function (origin, range, callback) {\r\n        // Always call the original\r\n        callback(origin, 0, 1);\r\n        var shadows = [];\r\n        // For all rings\r\n        for (var r = 1; r <= range; r++) {\r\n            var ring = this.getRing(origin.x, origin.y, r);\r\n            // * by 2 here since we're making 2 arcs per tile\r\n            var arcCount = ring.length * 2;\r\n            // For all cells\r\n            for (var i = 0; i < ring.length; i++) {\r\n                var cell = ring[i];\r\n                // If it's the first angle, we shift the negative value to a positive one.\r\n                // i.e. -1/8 -> 7/8\r\n                var lesserN = i === 0 ? arcCount - 1 : 2 * i - 1;\r\n                // ToDo - Fix naming\r\n                var lesserAngle = [lesserN, arcCount];\r\n                var greaterAngle = [2 * i + 1, arcCount];\r\n                var blocks = this.lightPasses(cell) === false;\r\n                var visibility = this.checkVisibility(lesserAngle, greaterAngle, blocks, shadows);\r\n                if (visibility || this.returnAll) {\r\n                    if (this.cartesianRange) {\r\n                        var absRange = Vector.getDistance(origin, cell);\r\n                        if (absRange <= range) {\r\n                            callback(cell, r, visibility);\r\n                        }\r\n                    }\r\n                    else {\r\n                        callback(cell, r, visibility);\r\n                    }\r\n                }\r\n                // ToDo - Short circuit if entirely surrounded\r\n            }\r\n        }\r\n    };\r\n    PreciseShadowcasting.prototype.checkVisibility = function (A1, A2, blocks, shadows) {\r\n        if (A1[0] > A2[0]) {\r\n            /* split into two sub-arcs */\r\n            var v1 = this.checkVisibility(A1, [A1[1], A1[1]], blocks, shadows);\r\n            var v2 = this.checkVisibility([0, 1], A2, blocks, shadows);\r\n            return (v1 + v2) / 2;\r\n        }\r\n        /* index1: first shadow >= A1 */\r\n        var index1 = 0, edge1 = false;\r\n        while (index1 < shadows.length) {\r\n            var old = shadows[index1];\r\n            var diff = old[0] * A1[1] - A1[0] * old[1];\r\n            if (diff >= 0) {\r\n                /* old >= A1 */\r\n                if (diff == 0 && !(index1 % 2)) {\r\n                    edge1 = true;\r\n                }\r\n                break;\r\n            }\r\n            index1++;\r\n        }\r\n        /* index2: last shadow <= A2 */\r\n        var index2 = shadows.length, edge2 = false;\r\n        while (index2--) {\r\n            var old = shadows[index2];\r\n            var diff = A2[0] * old[1] - old[0] * A2[1];\r\n            if (diff >= 0) {\r\n                /* old <= A2 */\r\n                if (diff == 0 && index2 % 2) {\r\n                    edge2 = true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        var visible = this.checkShadowVisibility(index1, index2, edge1, edge2);\r\n        if (!visible) {\r\n            return 0;\r\n        } /* fast case: not visible */\r\n        var visibleLength;\r\n        /* compute the length of visible arc, adjust list of shadows (if blocking) */\r\n        var remove = index2 - index1 + 1;\r\n        if (remove % 2) {\r\n            if (index1 % 2) {\r\n                /* first edge within existing shadow, second outside */\r\n                var P = shadows[index1];\r\n                visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\r\n                if (blocks) {\r\n                    shadows.splice(index1, remove, A2);\r\n                }\r\n            }\r\n            else {\r\n                /* second edge within existing shadow, first outside */\r\n                var P = shadows[index2];\r\n                visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\r\n                if (blocks) {\r\n                    shadows.splice(index1, remove, A1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (index1 % 2) {\r\n                /* both edges within existing shadows */\r\n                var P1 = shadows[index1];\r\n                var P2 = shadows[index2];\r\n                visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\r\n                if (blocks) {\r\n                    shadows.splice(index1, remove);\r\n                }\r\n            }\r\n            else {\r\n                /* both edges outside existing shadows */\r\n                if (blocks) {\r\n                    shadows.splice(index1, remove, A1, A2);\r\n                }\r\n                return 1; /* whole arc visible! */\r\n            }\r\n        }\r\n        var arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\r\n        return visibleLength / arcLength;\r\n    };\r\n    PreciseShadowcasting.prototype.checkShadowVisibility = function (index1, index2, edge1, edge2) {\r\n        var visible = true;\r\n        if (index1 == index2 && (edge1 || edge2)) {\r\n            /* subset of existing shadow, one of the edges match */\r\n            visible = false;\r\n        }\r\n        else if (edge1 && edge2 && index1 + 1 == index2 && index2 % 2) {\r\n            /* completely equivalent with existing shadow */\r\n            visible = false;\r\n        }\r\n        else if (index1 > index2 && index1 % 2) {\r\n            /* subset of existing shadow, not touching */\r\n            visible = false;\r\n        }\r\n        return visible;\r\n    };\r\n    return PreciseShadowcasting;\r\n}());\r\n//# sourceMappingURL=precise.js.map\n\n//# sourceMappingURL=index.js.map\n\nvar index$7 = /*#__PURE__*/Object.freeze({\n    PreciseShadowcasting: PreciseShadowcasting\n});\n\n//# sourceMappingURL=malwoden.js.map\n\n\n//# sourceMappingURL=malwoden.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../dist/malwoden.es5.js\n");

/***/ })

})